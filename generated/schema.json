{
    "$ref": "#/definitions/Dashboard",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "AnnotationContainer": {
            "properties": {
                "list": {
                    "items": {
                        "$ref": "#/definitions/AnnotationQuery<DataQuery>"
                    },
                    "title": "list",
                    "type": "array"
                }
            },
            "propertyOrder": [
                "list"
            ],
            "title": "AnnotationContainer",
            "type": "object"
        },
        "AnnotationPanelFilter": {
            "properties": {
                "exclude": {
                    "description": "Should the specified panels be included or excluded",
                    "title": "exclude",
                    "type": "boolean"
                },
                "ids": {
                    "description": "Panel IDs that should be included or excluded",
                    "items": {
                        "type": "number"
                    },
                    "title": "ids",
                    "type": "array"
                }
            },
            "propertyOrder": [
                "exclude",
                "ids"
            ],
            "title": "AnnotationPanelFilter",
            "type": "object"
        },
        "AnnotationQuery<DataQuery>": {
            "properties": {
                "builtIn": {
                    "description": "Set to 1 for the standard annotation query all dashboards have by default.",
                    "title": "builtIn",
                    "type": "number"
                },
                "datasource": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DataSourceRef"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "title": "datasource"
                },
                "enable": {
                    "description": "When enabled the annotation query is issued with every dashboard refresh",
                    "title": "enable",
                    "type": "boolean"
                },
                "filter": {
                    "$ref": "#/definitions/AnnotationPanelFilter",
                    "description": "Filters to apply when fetching annotations",
                    "title": "filter"
                },
                "hide": {
                    "description": "Annotation queries can be toggled on or off at the top of the dashboard.\nWhen hide is true, the toggle is not shown in the dashboard.",
                    "title": "hide",
                    "type": "boolean"
                },
                "iconColor": {
                    "description": "Color to use for the annotation event markers",
                    "title": "iconColor",
                    "type": "string"
                },
                "name": {
                    "description": "Name of annotation.",
                    "title": "name",
                    "type": "string"
                },
                "snapshotData": {
                    "title": "snapshotData"
                },
                "target": {
                    "$ref": "#/definitions/DataQuery",
                    "title": "target"
                },
                "type": {
                    "description": "TODO -- this should not exist here, it is based on the --grafana-- datasource",
                    "title": "type",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "datasource",
                "target",
                "snapshotData",
                "type",
                "name",
                "filter",
                "hide",
                "builtIn",
                "enable",
                "iconColor"
            ],
            "title": "AnnotationQuery<DataQuery>",
            "type": "object"
        },
        "BarChart": {
            "properties": {
                "cacheTimeout": {
                    "description": "Sets panel queries cache timeout.",
                    "title": "cacheTimeout",
                    "type": "string"
                },
                "datasource": {
                    "$ref": "#/definitions/DataSourceRef_1",
                    "description": "The datasource used in all targets.",
                    "title": "datasource"
                },
                "description": {
                    "description": "Panel description.",
                    "title": "description",
                    "type": "string"
                },
                "fieldConfig": {
                    "$ref": "#/definitions/FieldConfigSource<BarChartFieldConfig>",
                    "title": "fieldConfig"
                },
                "gridPos": {
                    "$ref": "#/definitions/GridPos",
                    "description": "Grid position.",
                    "title": "gridPos"
                },
                "hideTimeOverride": {
                    "description": "Controls if the timeFrom or timeShift overrides are shown in the panel header",
                    "title": "hideTimeOverride",
                    "type": "boolean"
                },
                "id": {
                    "description": "Unique identifier of the panel. Generated by Grafana when creating a new panel. It must be unique within a dashboard, but not globally.",
                    "title": "id",
                    "type": "number"
                },
                "interval": {
                    "description": "The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables.\nThis value must be formatted as a number followed by a valid time\nidentifier like: \"40s\", \"3d\", etc.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options",
                    "title": "interval",
                    "type": "string"
                },
                "libraryPanel": {
                    "$ref": "#/definitions/LibraryPanelRef",
                    "description": "Dynamically load the panel",
                    "title": "libraryPanel"
                },
                "links": {
                    "description": "Panel links.",
                    "items": {
                        "$ref": "#/definitions/DashboardLink"
                    },
                    "title": "links",
                    "type": "array"
                },
                "maxDataPoints": {
                    "description": "The maximum number of data points that the panel queries are retrieving.",
                    "title": "maxDataPoints",
                    "type": "number"
                },
                "maxPerRow": {
                    "description": "Option for repeated panels that controls max items per row\nOnly relevant for horizontally repeated panels",
                    "title": "maxPerRow",
                    "type": "number"
                },
                "options": {
                    "$ref": "#/definitions/BarChartOptions",
                    "title": "options"
                },
                "pluginVersion": {
                    "description": "The version of the plugin that is used for this panel. This is used to find the plugin to display the panel and to migrate old panel configs.",
                    "title": "pluginVersion",
                    "type": "string"
                },
                "queryCachingTTL": {
                    "description": "Overrides the data source configured time-to-live for a query cache item in milliseconds",
                    "title": "queryCachingTTL",
                    "type": "number"
                },
                "repeat": {
                    "description": "Name of template variable to repeat for.",
                    "title": "repeat",
                    "type": "string"
                },
                "repeatDirection": {
                    "description": "Direction to repeat in if 'repeat' is set.\n`h` for horizontal, `v` for vertical.",
                    "enum": [
                        "h",
                        "v"
                    ],
                    "title": "repeatDirection",
                    "type": "string"
                },
                "targets": {
                    "items": {
                        "$ref": "#/definitions/PrometheusDataQuery"
                    },
                    "title": "targets",
                    "type": "array"
                },
                "timeFrom": {
                    "description": "Overrides the relative time range for individual panels,\nwhich causes them to be different than what is selected in\nthe dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different\ntime periods or days on the same dashboard.\nThe value is formatted as time operation like: `now-5m` (Last 5 minutes), `now/d` (the day so far),\n`now-5d/d`(Last 5 days), `now/w` (This week so far), `now-2y/y` (Last 2 years).\nNote: Panel time overrides have no effect when the dashboard’s time range is absolute.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options",
                    "title": "timeFrom",
                    "type": "string"
                },
                "timeShift": {
                    "description": "Overrides the time range for individual panels by shifting its start and end relative to the time picker.\nFor example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting `2h`.\nNote: Panel time overrides have no effect when the dashboard’s time range is absolute.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options",
                    "title": "timeShift",
                    "type": "string"
                },
                "title": {
                    "description": "Panel title.",
                    "title": "title",
                    "type": "string"
                },
                "transformations": {
                    "description": "List of transformations that are applied to the panel data before rendering.\nWhen there are multiple transformations, Grafana applies them in the order they are listed.\nEach transformation creates a result set that then passes on to the next transformation in the processing pipeline.",
                    "items": {
                        "$ref": "#/definitions/DataTransformerConfig$1"
                    },
                    "title": "transformations",
                    "type": "array"
                },
                "transparent": {
                    "description": "Whether to display the panel without a background.",
                    "title": "transparent",
                    "type": "boolean"
                },
                "type": {
                    "const": "barchart",
                    "description": "The panel plugin type id. This is used to find the plugin to display the panel.",
                    "title": "type",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "options",
                "targets",
                "fieldConfig",
                "cacheTimeout",
                "datasource",
                "description",
                "gridPos",
                "hideTimeOverride",
                "id",
                "interval",
                "libraryPanel",
                "links",
                "maxDataPoints",
                "maxPerRow",
                "pluginVersion",
                "queryCachingTTL",
                "repeat",
                "repeatDirection",
                "timeFrom",
                "timeShift",
                "title",
                "transformations",
                "transparent"
            ],
            "title": "BarChart",
            "type": "object"
        },
        "BarChartFieldConfig": {
            "properties": {
                "axisBorderShow": {
                    "title": "axisBorderShow",
                    "type": "boolean"
                },
                "axisCenteredZero": {
                    "title": "axisCenteredZero",
                    "type": "boolean"
                },
                "axisColorMode": {
                    "description": "TODO docs",
                    "enum": [
                        "series",
                        "text"
                    ],
                    "title": "axisColorMode",
                    "type": "string"
                },
                "axisGridShow": {
                    "title": "axisGridShow",
                    "type": "boolean"
                },
                "axisLabel": {
                    "title": "axisLabel",
                    "type": "string"
                },
                "axisPlacement": {
                    "description": "TODO docs",
                    "enum": [
                        "auto",
                        "bottom",
                        "hidden",
                        "left",
                        "right",
                        "top"
                    ],
                    "title": "axisPlacement",
                    "type": "string"
                },
                "axisSoftMax": {
                    "title": "axisSoftMax",
                    "type": "number"
                },
                "axisSoftMin": {
                    "title": "axisSoftMin",
                    "type": "number"
                },
                "axisWidth": {
                    "title": "axisWidth",
                    "type": "number"
                },
                "fillOpacity": {
                    "description": "Controls the fill opacity of the bars.",
                    "title": "fillOpacity",
                    "type": "number"
                },
                "gradientMode": {
                    "description": "Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.\nGradient appearance is influenced by the Fill opacity setting.",
                    "enum": [
                        "hue",
                        "none",
                        "opacity",
                        "scheme"
                    ],
                    "title": "gradientMode",
                    "type": "string"
                },
                "hideFrom": {
                    "$ref": "#/definitions/HideSeriesConfig",
                    "description": "TODO docs",
                    "title": "hideFrom"
                },
                "lineWidth": {
                    "description": "Controls line width of the bars.",
                    "title": "lineWidth",
                    "type": "number"
                },
                "scaleDistribution": {
                    "$ref": "#/definitions/ScaleDistributionConfig",
                    "description": "TODO docs",
                    "title": "scaleDistribution"
                },
                "thresholdsStyle": {
                    "$ref": "#/definitions/GraphThresholdsStyleConfig",
                    "description": "Threshold rendering",
                    "title": "thresholdsStyle"
                }
            },
            "propertyOrder": [
                "fillOpacity",
                "gradientMode",
                "lineWidth",
                "thresholdsStyle",
                "axisBorderShow",
                "axisCenteredZero",
                "axisColorMode",
                "axisGridShow",
                "axisLabel",
                "axisPlacement",
                "axisSoftMax",
                "axisSoftMin",
                "axisWidth",
                "scaleDistribution",
                "hideFrom"
            ],
            "title": "BarChartFieldConfig",
            "type": "object"
        },
        "BarChartOptions": {
            "properties": {
                "barRadius": {
                    "description": "Controls the radius of each bar.",
                    "title": "barRadius",
                    "type": "number"
                },
                "barWidth": {
                    "description": "Controls the width of bars. 1 = Max width, 0 = Min width.",
                    "title": "barWidth",
                    "type": "number"
                },
                "colorByField": {
                    "description": "Use the color value for a sibling field to color each bar value.",
                    "title": "colorByField",
                    "type": "string"
                },
                "fullHighlight": {
                    "description": "Enables mode which highlights the entire bar area and shows tooltip when cursor\nhovers over highlighted area",
                    "title": "fullHighlight",
                    "type": "boolean"
                },
                "groupWidth": {
                    "description": "Controls the width of groups. 1 = max with, 0 = min width.",
                    "title": "groupWidth",
                    "type": "number"
                },
                "legend": {
                    "$ref": "#/definitions/VizLegendOptions",
                    "title": "legend"
                },
                "orientation": {
                    "$ref": "#/definitions/VizOrientation",
                    "description": "Controls the orientation of the bar chart, either vertical or horizontal.",
                    "title": "orientation"
                },
                "showValue": {
                    "$ref": "#/definitions/VisibilityMode",
                    "description": "This controls whether values are shown on top or to the left of bars.",
                    "title": "showValue"
                },
                "stacking": {
                    "$ref": "#/definitions/StackingMode",
                    "description": "Controls whether bars are stacked or not, either normally or in percent mode.",
                    "title": "stacking"
                },
                "text": {
                    "$ref": "#/definitions/VizTextDisplayOptions",
                    "description": "TODO docs",
                    "title": "text"
                },
                "tooltip": {
                    "$ref": "#/definitions/VizTooltipOptions",
                    "title": "tooltip"
                },
                "xField": {
                    "description": "Manually select which field from the dataset to represent the x field.",
                    "title": "xField",
                    "type": "string"
                },
                "xTickLabelMaxLength": {
                    "description": "Sets the max length that a label can have before it is truncated.",
                    "title": "xTickLabelMaxLength",
                    "type": "number"
                },
                "xTickLabelRotation": {
                    "description": "Controls the rotation of the x axis labels.",
                    "title": "xTickLabelRotation",
                    "type": "number"
                },
                "xTickLabelSpacing": {
                    "description": "Controls the spacing between x axis labels.\nnegative values indicate backwards skipping behavior",
                    "title": "xTickLabelSpacing",
                    "type": "number"
                }
            },
            "propertyOrder": [
                "barRadius",
                "barWidth",
                "colorByField",
                "fullHighlight",
                "groupWidth",
                "orientation",
                "showValue",
                "stacking",
                "xField",
                "xTickLabelMaxLength",
                "xTickLabelRotation",
                "xTickLabelSpacing",
                "legend",
                "tooltip",
                "text"
            ],
            "title": "BarChartOptions",
            "type": "object"
        },
        "BarGauge": {
            "properties": {
                "cacheTimeout": {
                    "description": "Sets panel queries cache timeout.",
                    "title": "cacheTimeout",
                    "type": "string"
                },
                "datasource": {
                    "$ref": "#/definitions/DataSourceRef_1",
                    "description": "The datasource used in all targets.",
                    "title": "datasource"
                },
                "description": {
                    "description": "Panel description.",
                    "title": "description",
                    "type": "string"
                },
                "fieldConfig": {
                    "$ref": "#/definitions/FieldConfigSource<Record<string,unknown>>",
                    "title": "fieldConfig"
                },
                "gridPos": {
                    "$ref": "#/definitions/GridPos",
                    "description": "Grid position.",
                    "title": "gridPos"
                },
                "hideTimeOverride": {
                    "description": "Controls if the timeFrom or timeShift overrides are shown in the panel header",
                    "title": "hideTimeOverride",
                    "type": "boolean"
                },
                "id": {
                    "description": "Unique identifier of the panel. Generated by Grafana when creating a new panel. It must be unique within a dashboard, but not globally.",
                    "title": "id",
                    "type": "number"
                },
                "interval": {
                    "description": "The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables.\nThis value must be formatted as a number followed by a valid time\nidentifier like: \"40s\", \"3d\", etc.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options",
                    "title": "interval",
                    "type": "string"
                },
                "libraryPanel": {
                    "$ref": "#/definitions/LibraryPanelRef",
                    "description": "Dynamically load the panel",
                    "title": "libraryPanel"
                },
                "links": {
                    "description": "Panel links.",
                    "items": {
                        "$ref": "#/definitions/DashboardLink"
                    },
                    "title": "links",
                    "type": "array"
                },
                "maxDataPoints": {
                    "description": "The maximum number of data points that the panel queries are retrieving.",
                    "title": "maxDataPoints",
                    "type": "number"
                },
                "maxPerRow": {
                    "description": "Option for repeated panels that controls max items per row\nOnly relevant for horizontally repeated panels",
                    "title": "maxPerRow",
                    "type": "number"
                },
                "options": {
                    "$ref": "#/definitions/BarGaugeOptions",
                    "title": "options"
                },
                "pluginVersion": {
                    "description": "The version of the plugin that is used for this panel. This is used to find the plugin to display the panel and to migrate old panel configs.",
                    "title": "pluginVersion",
                    "type": "string"
                },
                "queryCachingTTL": {
                    "description": "Overrides the data source configured time-to-live for a query cache item in milliseconds",
                    "title": "queryCachingTTL",
                    "type": "number"
                },
                "repeat": {
                    "description": "Name of template variable to repeat for.",
                    "title": "repeat",
                    "type": "string"
                },
                "repeatDirection": {
                    "description": "Direction to repeat in if 'repeat' is set.\n`h` for horizontal, `v` for vertical.",
                    "enum": [
                        "h",
                        "v"
                    ],
                    "title": "repeatDirection",
                    "type": "string"
                },
                "targets": {
                    "items": {
                        "$ref": "#/definitions/PrometheusDataQuery"
                    },
                    "title": "targets",
                    "type": "array"
                },
                "timeFrom": {
                    "description": "Overrides the relative time range for individual panels,\nwhich causes them to be different than what is selected in\nthe dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different\ntime periods or days on the same dashboard.\nThe value is formatted as time operation like: `now-5m` (Last 5 minutes), `now/d` (the day so far),\n`now-5d/d`(Last 5 days), `now/w` (This week so far), `now-2y/y` (Last 2 years).\nNote: Panel time overrides have no effect when the dashboard’s time range is absolute.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options",
                    "title": "timeFrom",
                    "type": "string"
                },
                "timeShift": {
                    "description": "Overrides the time range for individual panels by shifting its start and end relative to the time picker.\nFor example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting `2h`.\nNote: Panel time overrides have no effect when the dashboard’s time range is absolute.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options",
                    "title": "timeShift",
                    "type": "string"
                },
                "title": {
                    "description": "Panel title.",
                    "title": "title",
                    "type": "string"
                },
                "transformations": {
                    "description": "List of transformations that are applied to the panel data before rendering.\nWhen there are multiple transformations, Grafana applies them in the order they are listed.\nEach transformation creates a result set that then passes on to the next transformation in the processing pipeline.",
                    "items": {
                        "$ref": "#/definitions/DataTransformerConfig$1"
                    },
                    "title": "transformations",
                    "type": "array"
                },
                "transparent": {
                    "description": "Whether to display the panel without a background.",
                    "title": "transparent",
                    "type": "boolean"
                },
                "type": {
                    "const": "bargauge",
                    "description": "The panel plugin type id. This is used to find the plugin to display the panel.",
                    "title": "type",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "options",
                "targets",
                "fieldConfig",
                "cacheTimeout",
                "datasource",
                "description",
                "gridPos",
                "hideTimeOverride",
                "id",
                "interval",
                "libraryPanel",
                "links",
                "maxDataPoints",
                "maxPerRow",
                "pluginVersion",
                "queryCachingTTL",
                "repeat",
                "repeatDirection",
                "timeFrom",
                "timeShift",
                "title",
                "transformations",
                "transparent"
            ],
            "title": "BarGauge",
            "type": "object"
        },
        "BarGaugeDisplayMode": {
            "description": "Enum expressing the possible display modes\nfor the bar gauge component of Grafana UI",
            "enum": [
                "basic",
                "gradient",
                "lcd"
            ],
            "title": "BarGaugeDisplayMode",
            "type": "string"
        },
        "BarGaugeNamePlacement": {
            "description": "Allows for the bar gauge name to be placed explicitly",
            "enum": [
                "auto",
                "hidden",
                "left",
                "top"
            ],
            "title": "BarGaugeNamePlacement",
            "type": "string"
        },
        "BarGaugeOptions": {
            "properties": {
                "displayMode": {
                    "$ref": "#/definitions/BarGaugeDisplayMode",
                    "title": "displayMode"
                },
                "legend": {
                    "$ref": "#/definitions/VizLegendOptions",
                    "title": "legend"
                },
                "maxVizHeight": {
                    "title": "maxVizHeight",
                    "type": "number"
                },
                "minVizHeight": {
                    "title": "minVizHeight",
                    "type": "number"
                },
                "minVizWidth": {
                    "title": "minVizWidth",
                    "type": "number"
                },
                "namePlacement": {
                    "$ref": "#/definitions/BarGaugeNamePlacement",
                    "title": "namePlacement"
                },
                "orientation": {
                    "$ref": "#/definitions/VizOrientation",
                    "title": "orientation"
                },
                "reduceOptions": {
                    "$ref": "#/definitions/ReduceDataOptions",
                    "title": "reduceOptions"
                },
                "showUnfilled": {
                    "title": "showUnfilled",
                    "type": "boolean"
                },
                "sizing": {
                    "$ref": "#/definitions/BarGaugeSizing",
                    "title": "sizing"
                },
                "text": {
                    "$ref": "#/definitions/VizTextDisplayOptions",
                    "description": "TODO docs",
                    "title": "text"
                },
                "valueMode": {
                    "$ref": "#/definitions/BarGaugeValueMode",
                    "title": "valueMode"
                }
            },
            "propertyOrder": [
                "displayMode",
                "maxVizHeight",
                "minVizHeight",
                "minVizWidth",
                "namePlacement",
                "showUnfilled",
                "sizing",
                "valueMode",
                "legend",
                "orientation",
                "reduceOptions",
                "text"
            ],
            "title": "BarGaugeOptions",
            "type": "object"
        },
        "BarGaugeSizing": {
            "description": "Allows for the bar gauge size to be set explicitly",
            "enum": [
                "auto",
                "manual"
            ],
            "title": "BarGaugeSizing",
            "type": "string"
        },
        "BarGaugeValueMode": {
            "description": "Allows for the table cell gauge display type to set the gauge mode.",
            "enum": [
                "color",
                "hidden",
                "text"
            ],
            "title": "BarGaugeValueMode",
            "type": "string"
        },
        "BigValueColorMode": {
            "description": "TODO docs",
            "enum": [
                "background",
                "background_solid",
                "none",
                "value"
            ],
            "title": "BigValueColorMode",
            "type": "string"
        },
        "BigValueGraphMode": {
            "description": "TODO docs",
            "enum": [
                "area",
                "line",
                "none"
            ],
            "title": "BigValueGraphMode",
            "type": "string"
        },
        "BigValueJustifyMode": {
            "description": "TODO docs",
            "enum": [
                "auto",
                "center"
            ],
            "title": "BigValueJustifyMode",
            "type": "string"
        },
        "BigValueTextMode": {
            "description": "TODO docs",
            "enum": [
                "auto",
                "name",
                "none",
                "value",
                "value_and_name"
            ],
            "title": "BigValueTextMode",
            "type": "string"
        },
        "Dashboard": {
            "properties": {
                "annotations": {
                    "$ref": "#/definitions/AnnotationContainer",
                    "title": "annotations"
                },
                "description": {
                    "description": "Description of dashboard.",
                    "title": "description",
                    "type": "string"
                },
                "editable": {
                    "description": "Whether a dashboard is editable or not.",
                    "title": "editable",
                    "type": "boolean"
                },
                "fiscalYearStartMonth": {
                    "description": "The month that the fiscal year starts on.  0 = January, 11 = December",
                    "title": "fiscalYearStartMonth",
                    "type": "number"
                },
                "gnetId": {
                    "description": "ID of a dashboard imported from the https://grafana.com/grafana/dashboards/ portal",
                    "title": "gnetId",
                    "type": "string"
                },
                "graphTooltip": {
                    "description": "Configuration of dashboard cursor sync behavior.\nAccepted values are 0 (sync turned off), 1 (shared crosshair), 2 (shared crosshair and tooltip).",
                    "enum": [
                        0,
                        1,
                        2
                    ],
                    "title": "graphTooltip",
                    "type": "number"
                },
                "id": {
                    "description": "Unique numeric identifier for the dashboard.\n`id` is internal to a specific Grafana instance. `uid` should be used to identify a dashboard across Grafana instances.",
                    "title": "id",
                    "type": [
                        "null",
                        "number"
                    ]
                },
                "links": {
                    "description": "Links with references to other dashboards or external websites.",
                    "items": {
                        "$ref": "#/definitions/DashboardLink"
                    },
                    "title": "links",
                    "type": "array"
                },
                "liveNow": {
                    "description": "When set to true, the dashboard will redraw panels at an interval matching the pixel width.\nThis will keep data \"moving left\" regardless of the query refresh rate. This setting helps\navoid dashboards presenting stale live data",
                    "title": "liveNow",
                    "type": "boolean"
                },
                "panels": {
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/BarGauge"
                            },
                            {
                                "$ref": "#/definitions/BarChart"
                            },
                            {
                                "$ref": "#/definitions/Gauge"
                            },
                            {
                                "$ref": "#/definitions/PieChart"
                            },
                            {
                                "$ref": "#/definitions/Stat"
                            },
                            {
                                "$ref": "#/definitions/Table"
                            },
                            {
                                "$ref": "#/definitions/TimeSeries"
                            },
                            {
                                "$ref": "#/definitions/RowPanel"
                            }
                        ]
                    },
                    "title": "panels",
                    "type": "array"
                },
                "preload": {
                    "description": "When set to true, the dashboard will load all panels in the dashboard when it's loaded.",
                    "title": "preload",
                    "type": "boolean"
                },
                "refresh": {
                    "description": "Refresh rate of dashboard. Represented via interval string, e.g. \"5s\", \"1m\", \"1h\", \"1d\".",
                    "title": "refresh",
                    "type": "string"
                },
                "revision": {
                    "description": "This property should only be used in dashboards defined by plugins.  It is a quick check\nto see if the version has changed since the last time.",
                    "title": "revision",
                    "type": "number"
                },
                "schemaVersion": {
                    "description": "Version of the JSON schema, incremented each time a Grafana update brings\nchanges to said schema.",
                    "title": "schemaVersion",
                    "type": "number"
                },
                "snapshot": {
                    "description": "Snapshot options. They are present only if the dashboard is a snapshot.",
                    "properties": {
                        "created": {
                            "description": "Time when the snapshot was created",
                            "title": "created",
                            "type": "string"
                        },
                        "expires": {
                            "description": "Time when the snapshot expires, default is never to expire",
                            "title": "expires",
                            "type": "string"
                        },
                        "external": {
                            "description": "Is the snapshot saved in an external grafana instance",
                            "title": "external",
                            "type": "boolean"
                        },
                        "externalUrl": {
                            "description": "external url, if snapshot was shared in external grafana instance",
                            "title": "externalUrl",
                            "type": "string"
                        },
                        "id": {
                            "description": "Unique identifier of the snapshot",
                            "title": "id",
                            "type": "number"
                        },
                        "key": {
                            "description": "Optional, defined the unique key of the snapshot, required if external is true",
                            "title": "key",
                            "type": "string"
                        },
                        "name": {
                            "description": "Optional, name of the snapshot",
                            "title": "name",
                            "type": "string"
                        },
                        "orgId": {
                            "description": "org id of the snapshot",
                            "title": "orgId",
                            "type": "number"
                        },
                        "originalUrl": {
                            "description": "original url, url of the dashboard that was snapshotted",
                            "title": "originalUrl",
                            "type": "string"
                        },
                        "updated": {
                            "description": "last time when the snapshot was updated",
                            "title": "updated",
                            "type": "string"
                        },
                        "url": {
                            "description": "url of the snapshot, if snapshot was shared internally",
                            "title": "url",
                            "type": "string"
                        },
                        "userId": {
                            "description": "user id of the snapshot creator",
                            "title": "userId",
                            "type": "number"
                        }
                    },
                    "propertyOrder": [
                        "created",
                        "expires",
                        "external",
                        "externalUrl",
                        "originalUrl",
                        "id",
                        "key",
                        "name",
                        "orgId",
                        "updated",
                        "url",
                        "userId"
                    ],
                    "title": "snapshot",
                    "type": "object"
                },
                "tags": {
                    "description": "Tags associated with dashboard.",
                    "items": {
                        "type": "string"
                    },
                    "title": "tags",
                    "type": "array"
                },
                "templating": {
                    "properties": {
                        "list": {
                            "items": {
                                "$ref": "#/definitions/VariableModel"
                            },
                            "title": "list",
                            "type": "array"
                        }
                    },
                    "propertyOrder": [
                        "list"
                    ],
                    "title": "templating",
                    "type": "object"
                },
                "time": {
                    "description": "Time range for dashboard.\nAccepted values are relative time strings like {from: 'now-6h', to: 'now'} or absolute time strings like {from: '2020-07-10T08:00:00.000Z', to: '2020-07-10T14:00:00.000Z'}.",
                    "properties": {
                        "from": {
                            "title": "from",
                            "type": "string"
                        },
                        "to": {
                            "title": "to",
                            "type": "string"
                        }
                    },
                    "propertyOrder": [
                        "from",
                        "to"
                    ],
                    "title": "time",
                    "type": "object"
                },
                "timepicker": {
                    "$ref": "#/definitions/TimePickerConfig$1",
                    "description": "Configuration of the time picker shown at the top of a dashboard.",
                    "title": "timepicker"
                },
                "timezone": {
                    "description": "Timezone of dashboard. Accepted values are IANA TZDB zone ID or \"browser\" or \"utc\".",
                    "title": "timezone",
                    "type": "string"
                },
                "title": {
                    "description": "Title of dashboard.",
                    "title": "title",
                    "type": "string"
                },
                "uid": {
                    "description": "Unique dashboard identifier that can be generated by anyone. string (8-40)",
                    "title": "uid",
                    "type": "string"
                },
                "version": {
                    "description": "Version of the dashboard, incremented each time the dashboard is updated.",
                    "title": "version",
                    "type": "number"
                },
                "weekStart": {
                    "description": "Day when the week starts. Expressed by the name of the day in lowercase, e.g. \"monday\".",
                    "title": "weekStart",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "panels",
                "description",
                "id",
                "links",
                "title",
                "templating",
                "annotations",
                "editable",
                "fiscalYearStartMonth",
                "gnetId",
                "graphTooltip",
                "liveNow",
                "preload",
                "refresh",
                "revision",
                "schemaVersion",
                "snapshot",
                "tags",
                "time",
                "timepicker",
                "timezone",
                "uid",
                "version",
                "weekStart"
            ],
            "title": "Dashboard",
            "type": "object"
        },
        "DashboardLink": {
            "description": "Links with references to other dashboards or external resources",
            "properties": {
                "asDropdown": {
                    "description": "If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards",
                    "title": "asDropdown",
                    "type": "boolean"
                },
                "icon": {
                    "description": "Icon name to be displayed with the link",
                    "title": "icon",
                    "type": "string"
                },
                "includeVars": {
                    "description": "If true, includes current template variables values in the link as query params",
                    "title": "includeVars",
                    "type": "boolean"
                },
                "keepTime": {
                    "description": "If true, includes current time range in the link as query params",
                    "title": "keepTime",
                    "type": "boolean"
                },
                "tags": {
                    "description": "List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards",
                    "items": {
                        "type": "string"
                    },
                    "title": "tags",
                    "type": "array"
                },
                "targetBlank": {
                    "description": "If true, the link will be opened in a new tab",
                    "title": "targetBlank",
                    "type": "boolean"
                },
                "title": {
                    "description": "Title to display with the link",
                    "title": "title",
                    "type": "string"
                },
                "tooltip": {
                    "description": "Tooltip to display when the user hovers their mouse over it",
                    "title": "tooltip",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/DashboardLinkType",
                    "description": "Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)",
                    "title": "type"
                },
                "url": {
                    "description": "Link URL. Only required/valid if the type is link",
                    "title": "url",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "asDropdown",
                "icon",
                "includeVars",
                "keepTime",
                "tags",
                "targetBlank",
                "title",
                "tooltip",
                "type",
                "url"
            ],
            "title": "DashboardLink",
            "type": "object"
        },
        "DashboardLinkType": {
            "description": "Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)",
            "enum": [
                "dashboards",
                "link"
            ],
            "title": "DashboardLinkType",
            "type": "string"
        },
        "DataQuery": {
            "properties": {
                "datasource": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DataSourceRef"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "For mixed data sources the selected datasource is on the query level.\nFor non mixed scenarios this is undefined.\nTODO find a better way to do this ^ that's friendly to schema\nTODO this shouldn't be unknown but DataSourceRef | null",
                    "title": "datasource"
                },
                "hide": {
                    "description": "If hide is set to true, Grafana will filter out the response(s) associated with this query before returning it to the panel.",
                    "title": "hide",
                    "type": "boolean"
                },
                "key": {
                    "description": "Unique, guid like, string (used only in explore mode)",
                    "title": "key",
                    "type": "string"
                },
                "queryType": {
                    "description": "Specify the query flavor\nTODO make this required and give it a default",
                    "title": "queryType",
                    "type": "string"
                },
                "refId": {
                    "description": "A unique identifier for the query within the list of targets.\nIn server side expressions, the refId is used as a variable name to identify results.\nBy default, the UI will assign A->Z; however setting meaningful names may be useful.",
                    "title": "refId",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "key",
                "datasource",
                "hide",
                "queryType",
                "refId"
            ],
            "title": "DataQuery",
            "type": "object"
        },
        "DataSourceRef": {
            "properties": {
                "apiVersion": {
                    "description": "Datasource API version",
                    "title": "apiVersion",
                    "type": "string"
                },
                "type": {
                    "description": "The plugin type-id",
                    "title": "type",
                    "type": "string"
                },
                "uid": {
                    "description": "Specific datasource instance",
                    "title": "uid",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "apiVersion",
                "type",
                "uid"
            ],
            "title": "DataSourceRef",
            "type": "object"
        },
        "DataSourceRef_1": {
            "description": "Ref to a DataSource instance",
            "properties": {
                "type": {
                    "description": "The plugin type-id",
                    "title": "type",
                    "type": "string"
                },
                "uid": {
                    "description": "Specific datasource instance",
                    "title": "uid",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "uid"
            ],
            "title": "DataSourceRef_1",
            "type": "object"
        },
        "DataTransformerConfig$1": {
            "description": "Transformations allow to manipulate data returned by a query before the system applies a visualization.\nUsing transformations you can: rename fields, join time series data, perform mathematical operations across queries,\nuse the output of one transformation as the input to another transformation, etc.",
            "properties": {
                "disabled": {
                    "description": "Disabled transformations are skipped",
                    "title": "disabled",
                    "type": "boolean"
                },
                "filter": {
                    "$ref": "#/definitions/MatcherConfig$1",
                    "description": "Optional frame matcher. When missing it will be applied to all results",
                    "title": "filter"
                },
                "id": {
                    "description": "Unique identifier of transformer",
                    "title": "id",
                    "type": "string"
                },
                "options": {
                    "description": "Options to be passed to the transformer\nValid options depend on the transformer id",
                    "title": "options"
                },
                "topic": {
                    "description": "Where to pull DataFrames from as input to transformation",
                    "enum": [
                        "alertStates",
                        "annotations",
                        "series"
                    ],
                    "title": "topic",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "disabled",
                "filter",
                "id",
                "options",
                "topic"
            ],
            "title": "DataTransformerConfig$1",
            "type": "object"
        },
        "FieldColor": {
            "description": "Map a field to a color.",
            "properties": {
                "fixedColor": {
                    "description": "The fixed color value for fixed or shades color modes.",
                    "title": "fixedColor",
                    "type": "string"
                },
                "mode": {
                    "$ref": "#/definitions/FieldColorModeId",
                    "description": "The main color scheme mode.",
                    "title": "mode"
                },
                "seriesBy": {
                    "description": "Some visualizations need to know how to assign a series color from by value color schemes.",
                    "enum": [
                        "last",
                        "max",
                        "min"
                    ],
                    "title": "seriesBy",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "fixedColor",
                "mode",
                "seriesBy"
            ],
            "title": "FieldColor",
            "type": "object"
        },
        "FieldColorModeId": {
            "description": "Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value.\nContinuous color interpolates a color using the percentage of a value relative to min and max.\nAccepted values are:\n`thresholds`: From thresholds. Informs Grafana to take the color from the matching threshold\n`palette-classic`: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations\n`palette-classic-by-name`: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations\n`continuous-GrYlRd`: ontinuous Green-Yellow-Red palette mode\n`continuous-RdYlGr`: Continuous Red-Yellow-Green palette mode\n`continuous-BlYlRd`: Continuous Blue-Yellow-Red palette mode\n`continuous-YlRd`: Continuous Yellow-Red palette mode\n`continuous-BlPu`: Continuous Blue-Purple palette mode\n`continuous-YlBl`: Continuous Yellow-Blue palette mode\n`continuous-blues`: Continuous Blue palette mode\n`continuous-reds`: Continuous Red palette mode\n`continuous-greens`: Continuous Green palette mode\n`continuous-purples`: Continuous Purple palette mode\n`shades`: Shades of a single color. Specify a single color, useful in an override rule.\n`fixed`: Fixed color mode. Specify a single color, useful in an override rule.",
            "enum": [
                "continuous-BlPu",
                "continuous-BlYlRd",
                "continuous-blues",
                "continuous-GrYlRd",
                "continuous-greens",
                "continuous-purples",
                "continuous-RdYlGr",
                "continuous-reds",
                "continuous-YlBl",
                "continuous-YlRd",
                "fixed",
                "palette-classic",
                "palette-classic-by-name",
                "shades",
                "thresholds"
            ],
            "title": "FieldColorModeId",
            "type": "string"
        },
        "FieldConfig<BarChartFieldConfig>": {
            "properties": {
                "color": {
                    "$ref": "#/definitions/FieldColor",
                    "description": "Panel color configuration",
                    "title": "color"
                },
                "custom": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/BarChartFieldConfig"
                        },
                        {
                            "$ref": "#/definitions/Record<string,unknown>"
                        }
                    ],
                    "description": "custom is specified by the FieldConfig field\nin panel plugin schemas.",
                    "title": "custom"
                },
                "decimals": {
                    "description": "Specify the number of decimals Grafana includes in the rendered value.\nIf you leave this field blank, Grafana automatically truncates the number of decimals based on the value.\nFor example 1.1234 will display as 1.12 and 100.456 will display as 100.\nTo display all decimals, set the unit to `String`.",
                    "title": "decimals",
                    "type": "number"
                },
                "description": {
                    "description": "Human readable field metadata",
                    "title": "description",
                    "type": "string"
                },
                "displayName": {
                    "description": "The display value for this field.  This supports template variables blank is auto",
                    "title": "displayName",
                    "type": "string"
                },
                "displayNameFromDS": {
                    "description": "This can be used by data sources that return and explicit naming structure for values and labels\nWhen this property is configured, this value is used rather than the default naming strategy.",
                    "title": "displayNameFromDS",
                    "type": "string"
                },
                "filterable": {
                    "description": "True if data source field supports ad-hoc filters",
                    "title": "filterable",
                    "type": "boolean"
                },
                "links": {
                    "description": "The behavior when clicking on a result",
                    "items": {},
                    "title": "links",
                    "type": "array"
                },
                "mappings": {
                    "description": "Convert input values into a display string",
                    "items": {
                        "$ref": "#/definitions/ValueMapping"
                    },
                    "title": "mappings",
                    "type": "array"
                },
                "max": {
                    "description": "The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.",
                    "title": "max",
                    "type": "number"
                },
                "min": {
                    "description": "The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.",
                    "title": "min",
                    "type": "number"
                },
                "noValue": {
                    "description": "Alternative to empty string",
                    "title": "noValue",
                    "type": "string"
                },
                "path": {
                    "description": "An explicit path to the field in the datasource.  When the frame meta includes a path,\nThis will default to `${frame.meta.path}/${field.name}\n\nWhen defined, this value can be used as an identifier within the datasource scope, and\nmay be used to update the results",
                    "title": "path",
                    "type": "string"
                },
                "thresholds": {
                    "$ref": "#/definitions/ThresholdsConfig",
                    "description": "Map numeric values to states",
                    "title": "thresholds"
                },
                "unit": {
                    "description": "Unit a field should use. The unit you select is applied to all fields except time.\nYou can use the units ID availables in Grafana or a custom unit.\nAvailable units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts\nAs custom unit, you can use the following formats:\n`suffix:<suffix>` for custom unit that should go after value.\n`prefix:<prefix>` for custom unit that should go before value.\n`time:<format>` For custom date time formats type for example `time:YYYY-MM-DD`.\n`si:<base scale><unit characters>` for custom SI units. For example: `si: mF`. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.\n`count:<unit>` for a custom count unit.\n`currency:<unit>` for custom a currency unit.",
                    "title": "unit",
                    "type": "string"
                },
                "writeable": {
                    "description": "True if data source can write a value to the path. Auth/authz are supported separately",
                    "title": "writeable",
                    "type": "boolean"
                }
            },
            "propertyOrder": [
                "custom",
                "color",
                "decimals",
                "description",
                "displayName",
                "displayNameFromDS",
                "filterable",
                "links",
                "mappings",
                "max",
                "min",
                "noValue",
                "path",
                "thresholds",
                "unit",
                "writeable"
            ],
            "title": "FieldConfig<BarChartFieldConfig>",
            "type": "object"
        },
        "FieldConfig<PieChartFieldConfig>": {
            "properties": {
                "color": {
                    "$ref": "#/definitions/FieldColor",
                    "description": "Panel color configuration",
                    "title": "color"
                },
                "custom": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/PieChartFieldConfig"
                        },
                        {
                            "$ref": "#/definitions/Record<string,unknown>"
                        }
                    ],
                    "description": "custom is specified by the FieldConfig field\nin panel plugin schemas.",
                    "title": "custom"
                },
                "decimals": {
                    "description": "Specify the number of decimals Grafana includes in the rendered value.\nIf you leave this field blank, Grafana automatically truncates the number of decimals based on the value.\nFor example 1.1234 will display as 1.12 and 100.456 will display as 100.\nTo display all decimals, set the unit to `String`.",
                    "title": "decimals",
                    "type": "number"
                },
                "description": {
                    "description": "Human readable field metadata",
                    "title": "description",
                    "type": "string"
                },
                "displayName": {
                    "description": "The display value for this field.  This supports template variables blank is auto",
                    "title": "displayName",
                    "type": "string"
                },
                "displayNameFromDS": {
                    "description": "This can be used by data sources that return and explicit naming structure for values and labels\nWhen this property is configured, this value is used rather than the default naming strategy.",
                    "title": "displayNameFromDS",
                    "type": "string"
                },
                "filterable": {
                    "description": "True if data source field supports ad-hoc filters",
                    "title": "filterable",
                    "type": "boolean"
                },
                "links": {
                    "description": "The behavior when clicking on a result",
                    "items": {},
                    "title": "links",
                    "type": "array"
                },
                "mappings": {
                    "description": "Convert input values into a display string",
                    "items": {
                        "$ref": "#/definitions/ValueMapping"
                    },
                    "title": "mappings",
                    "type": "array"
                },
                "max": {
                    "description": "The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.",
                    "title": "max",
                    "type": "number"
                },
                "min": {
                    "description": "The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.",
                    "title": "min",
                    "type": "number"
                },
                "noValue": {
                    "description": "Alternative to empty string",
                    "title": "noValue",
                    "type": "string"
                },
                "path": {
                    "description": "An explicit path to the field in the datasource.  When the frame meta includes a path,\nThis will default to `${frame.meta.path}/${field.name}\n\nWhen defined, this value can be used as an identifier within the datasource scope, and\nmay be used to update the results",
                    "title": "path",
                    "type": "string"
                },
                "thresholds": {
                    "$ref": "#/definitions/ThresholdsConfig",
                    "description": "Map numeric values to states",
                    "title": "thresholds"
                },
                "unit": {
                    "description": "Unit a field should use. The unit you select is applied to all fields except time.\nYou can use the units ID availables in Grafana or a custom unit.\nAvailable units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts\nAs custom unit, you can use the following formats:\n`suffix:<suffix>` for custom unit that should go after value.\n`prefix:<prefix>` for custom unit that should go before value.\n`time:<format>` For custom date time formats type for example `time:YYYY-MM-DD`.\n`si:<base scale><unit characters>` for custom SI units. For example: `si: mF`. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.\n`count:<unit>` for a custom count unit.\n`currency:<unit>` for custom a currency unit.",
                    "title": "unit",
                    "type": "string"
                },
                "writeable": {
                    "description": "True if data source can write a value to the path. Auth/authz are supported separately",
                    "title": "writeable",
                    "type": "boolean"
                }
            },
            "propertyOrder": [
                "custom",
                "color",
                "decimals",
                "description",
                "displayName",
                "displayNameFromDS",
                "filterable",
                "links",
                "mappings",
                "max",
                "min",
                "noValue",
                "path",
                "thresholds",
                "unit",
                "writeable"
            ],
            "title": "FieldConfig<PieChartFieldConfig>",
            "type": "object"
        },
        "FieldConfig<Record<string,unknown>>": {
            "properties": {
                "color": {
                    "$ref": "#/definitions/FieldColor",
                    "description": "Panel color configuration",
                    "title": "color"
                },
                "custom": {
                    "$ref": "#/definitions/Record<string,unknown>",
                    "description": "custom is specified by the FieldConfig field\nin panel plugin schemas.",
                    "title": "custom"
                },
                "decimals": {
                    "description": "Specify the number of decimals Grafana includes in the rendered value.\nIf you leave this field blank, Grafana automatically truncates the number of decimals based on the value.\nFor example 1.1234 will display as 1.12 and 100.456 will display as 100.\nTo display all decimals, set the unit to `String`.",
                    "title": "decimals",
                    "type": "number"
                },
                "description": {
                    "description": "Human readable field metadata",
                    "title": "description",
                    "type": "string"
                },
                "displayName": {
                    "description": "The display value for this field.  This supports template variables blank is auto",
                    "title": "displayName",
                    "type": "string"
                },
                "displayNameFromDS": {
                    "description": "This can be used by data sources that return and explicit naming structure for values and labels\nWhen this property is configured, this value is used rather than the default naming strategy.",
                    "title": "displayNameFromDS",
                    "type": "string"
                },
                "filterable": {
                    "description": "True if data source field supports ad-hoc filters",
                    "title": "filterable",
                    "type": "boolean"
                },
                "links": {
                    "description": "The behavior when clicking on a result",
                    "items": {},
                    "title": "links",
                    "type": "array"
                },
                "mappings": {
                    "description": "Convert input values into a display string",
                    "items": {
                        "$ref": "#/definitions/ValueMapping"
                    },
                    "title": "mappings",
                    "type": "array"
                },
                "max": {
                    "description": "The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.",
                    "title": "max",
                    "type": "number"
                },
                "min": {
                    "description": "The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.",
                    "title": "min",
                    "type": "number"
                },
                "noValue": {
                    "description": "Alternative to empty string",
                    "title": "noValue",
                    "type": "string"
                },
                "path": {
                    "description": "An explicit path to the field in the datasource.  When the frame meta includes a path,\nThis will default to `${frame.meta.path}/${field.name}\n\nWhen defined, this value can be used as an identifier within the datasource scope, and\nmay be used to update the results",
                    "title": "path",
                    "type": "string"
                },
                "thresholds": {
                    "$ref": "#/definitions/ThresholdsConfig",
                    "description": "Map numeric values to states",
                    "title": "thresholds"
                },
                "unit": {
                    "description": "Unit a field should use. The unit you select is applied to all fields except time.\nYou can use the units ID availables in Grafana or a custom unit.\nAvailable units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts\nAs custom unit, you can use the following formats:\n`suffix:<suffix>` for custom unit that should go after value.\n`prefix:<prefix>` for custom unit that should go before value.\n`time:<format>` For custom date time formats type for example `time:YYYY-MM-DD`.\n`si:<base scale><unit characters>` for custom SI units. For example: `si: mF`. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.\n`count:<unit>` for a custom count unit.\n`currency:<unit>` for custom a currency unit.",
                    "title": "unit",
                    "type": "string"
                },
                "writeable": {
                    "description": "True if data source can write a value to the path. Auth/authz are supported separately",
                    "title": "writeable",
                    "type": "boolean"
                }
            },
            "propertyOrder": [
                "custom",
                "color",
                "decimals",
                "description",
                "displayName",
                "displayNameFromDS",
                "filterable",
                "links",
                "mappings",
                "max",
                "min",
                "noValue",
                "path",
                "thresholds",
                "unit",
                "writeable"
            ],
            "title": "FieldConfig<Record<string,unknown>>",
            "type": "object"
        },
        "FieldConfig<TableFieldConfig>": {
            "properties": {
                "color": {
                    "$ref": "#/definitions/FieldColor",
                    "description": "Panel color configuration",
                    "title": "color"
                },
                "custom": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/TableFieldConfig"
                        },
                        {
                            "$ref": "#/definitions/Record<string,unknown>"
                        }
                    ],
                    "description": "custom is specified by the FieldConfig field\nin panel plugin schemas.",
                    "title": "custom"
                },
                "decimals": {
                    "description": "Specify the number of decimals Grafana includes in the rendered value.\nIf you leave this field blank, Grafana automatically truncates the number of decimals based on the value.\nFor example 1.1234 will display as 1.12 and 100.456 will display as 100.\nTo display all decimals, set the unit to `String`.",
                    "title": "decimals",
                    "type": "number"
                },
                "description": {
                    "description": "Human readable field metadata",
                    "title": "description",
                    "type": "string"
                },
                "displayName": {
                    "description": "The display value for this field.  This supports template variables blank is auto",
                    "title": "displayName",
                    "type": "string"
                },
                "displayNameFromDS": {
                    "description": "This can be used by data sources that return and explicit naming structure for values and labels\nWhen this property is configured, this value is used rather than the default naming strategy.",
                    "title": "displayNameFromDS",
                    "type": "string"
                },
                "filterable": {
                    "description": "True if data source field supports ad-hoc filters",
                    "title": "filterable",
                    "type": "boolean"
                },
                "links": {
                    "description": "The behavior when clicking on a result",
                    "items": {},
                    "title": "links",
                    "type": "array"
                },
                "mappings": {
                    "description": "Convert input values into a display string",
                    "items": {
                        "$ref": "#/definitions/ValueMapping"
                    },
                    "title": "mappings",
                    "type": "array"
                },
                "max": {
                    "description": "The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.",
                    "title": "max",
                    "type": "number"
                },
                "min": {
                    "description": "The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.",
                    "title": "min",
                    "type": "number"
                },
                "noValue": {
                    "description": "Alternative to empty string",
                    "title": "noValue",
                    "type": "string"
                },
                "path": {
                    "description": "An explicit path to the field in the datasource.  When the frame meta includes a path,\nThis will default to `${frame.meta.path}/${field.name}\n\nWhen defined, this value can be used as an identifier within the datasource scope, and\nmay be used to update the results",
                    "title": "path",
                    "type": "string"
                },
                "thresholds": {
                    "$ref": "#/definitions/ThresholdsConfig",
                    "description": "Map numeric values to states",
                    "title": "thresholds"
                },
                "unit": {
                    "description": "Unit a field should use. The unit you select is applied to all fields except time.\nYou can use the units ID availables in Grafana or a custom unit.\nAvailable units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts\nAs custom unit, you can use the following formats:\n`suffix:<suffix>` for custom unit that should go after value.\n`prefix:<prefix>` for custom unit that should go before value.\n`time:<format>` For custom date time formats type for example `time:YYYY-MM-DD`.\n`si:<base scale><unit characters>` for custom SI units. For example: `si: mF`. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.\n`count:<unit>` for a custom count unit.\n`currency:<unit>` for custom a currency unit.",
                    "title": "unit",
                    "type": "string"
                },
                "writeable": {
                    "description": "True if data source can write a value to the path. Auth/authz are supported separately",
                    "title": "writeable",
                    "type": "boolean"
                }
            },
            "propertyOrder": [
                "custom",
                "color",
                "decimals",
                "description",
                "displayName",
                "displayNameFromDS",
                "filterable",
                "links",
                "mappings",
                "max",
                "min",
                "noValue",
                "path",
                "thresholds",
                "unit",
                "writeable"
            ],
            "title": "FieldConfig<TableFieldConfig>",
            "type": "object"
        },
        "FieldConfig<TimeSeriesFieldConfig>": {
            "properties": {
                "color": {
                    "$ref": "#/definitions/FieldColor",
                    "description": "Panel color configuration",
                    "title": "color"
                },
                "custom": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/TimeSeriesFieldConfig"
                        },
                        {
                            "$ref": "#/definitions/Record<string,unknown>"
                        }
                    ],
                    "description": "custom is specified by the FieldConfig field\nin panel plugin schemas.",
                    "title": "custom"
                },
                "decimals": {
                    "description": "Specify the number of decimals Grafana includes in the rendered value.\nIf you leave this field blank, Grafana automatically truncates the number of decimals based on the value.\nFor example 1.1234 will display as 1.12 and 100.456 will display as 100.\nTo display all decimals, set the unit to `String`.",
                    "title": "decimals",
                    "type": "number"
                },
                "description": {
                    "description": "Human readable field metadata",
                    "title": "description",
                    "type": "string"
                },
                "displayName": {
                    "description": "The display value for this field.  This supports template variables blank is auto",
                    "title": "displayName",
                    "type": "string"
                },
                "displayNameFromDS": {
                    "description": "This can be used by data sources that return and explicit naming structure for values and labels\nWhen this property is configured, this value is used rather than the default naming strategy.",
                    "title": "displayNameFromDS",
                    "type": "string"
                },
                "filterable": {
                    "description": "True if data source field supports ad-hoc filters",
                    "title": "filterable",
                    "type": "boolean"
                },
                "links": {
                    "description": "The behavior when clicking on a result",
                    "items": {},
                    "title": "links",
                    "type": "array"
                },
                "mappings": {
                    "description": "Convert input values into a display string",
                    "items": {
                        "$ref": "#/definitions/ValueMapping"
                    },
                    "title": "mappings",
                    "type": "array"
                },
                "max": {
                    "description": "The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.",
                    "title": "max",
                    "type": "number"
                },
                "min": {
                    "description": "The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.",
                    "title": "min",
                    "type": "number"
                },
                "noValue": {
                    "description": "Alternative to empty string",
                    "title": "noValue",
                    "type": "string"
                },
                "path": {
                    "description": "An explicit path to the field in the datasource.  When the frame meta includes a path,\nThis will default to `${frame.meta.path}/${field.name}\n\nWhen defined, this value can be used as an identifier within the datasource scope, and\nmay be used to update the results",
                    "title": "path",
                    "type": "string"
                },
                "thresholds": {
                    "$ref": "#/definitions/ThresholdsConfig",
                    "description": "Map numeric values to states",
                    "title": "thresholds"
                },
                "unit": {
                    "description": "Unit a field should use. The unit you select is applied to all fields except time.\nYou can use the units ID availables in Grafana or a custom unit.\nAvailable units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts\nAs custom unit, you can use the following formats:\n`suffix:<suffix>` for custom unit that should go after value.\n`prefix:<prefix>` for custom unit that should go before value.\n`time:<format>` For custom date time formats type for example `time:YYYY-MM-DD`.\n`si:<base scale><unit characters>` for custom SI units. For example: `si: mF`. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.\n`count:<unit>` for a custom count unit.\n`currency:<unit>` for custom a currency unit.",
                    "title": "unit",
                    "type": "string"
                },
                "writeable": {
                    "description": "True if data source can write a value to the path. Auth/authz are supported separately",
                    "title": "writeable",
                    "type": "boolean"
                }
            },
            "propertyOrder": [
                "custom",
                "color",
                "decimals",
                "description",
                "displayName",
                "displayNameFromDS",
                "filterable",
                "links",
                "mappings",
                "max",
                "min",
                "noValue",
                "path",
                "thresholds",
                "unit",
                "writeable"
            ],
            "title": "FieldConfig<TimeSeriesFieldConfig>",
            "type": "object"
        },
        "FieldConfigSource<BarChartFieldConfig>": {
            "properties": {
                "defaults": {
                    "$ref": "#/definitions/FieldConfig<BarChartFieldConfig>",
                    "title": "defaults"
                },
                "overrides": {
                    "description": "Overrides are the options applied to specific fields overriding the defaults.",
                    "items": {
                        "properties": {
                            "matcher": {
                                "$ref": "#/definitions/MatcherConfig$1",
                                "title": "matcher"
                            },
                            "properties": {
                                "items": {
                                    "properties": {
                                        "id": {
                                            "title": "id",
                                            "type": "string"
                                        },
                                        "value": {
                                            "title": "value"
                                        }
                                    },
                                    "propertyOrder": [
                                        "id",
                                        "value"
                                    ],
                                    "type": "object"
                                },
                                "title": "properties",
                                "type": "array"
                            }
                        },
                        "propertyOrder": [
                            "matcher",
                            "properties"
                        ],
                        "type": "object"
                    },
                    "title": "overrides",
                    "type": "array"
                }
            },
            "propertyOrder": [
                "defaults",
                "overrides"
            ],
            "title": "FieldConfigSource<BarChartFieldConfig>",
            "type": "object"
        },
        "FieldConfigSource<PieChartFieldConfig>": {
            "properties": {
                "defaults": {
                    "$ref": "#/definitions/FieldConfig<PieChartFieldConfig>",
                    "title": "defaults"
                },
                "overrides": {
                    "description": "Overrides are the options applied to specific fields overriding the defaults.",
                    "items": {
                        "properties": {
                            "matcher": {
                                "$ref": "#/definitions/MatcherConfig$1",
                                "title": "matcher"
                            },
                            "properties": {
                                "items": {
                                    "properties": {
                                        "id": {
                                            "title": "id",
                                            "type": "string"
                                        },
                                        "value": {
                                            "title": "value"
                                        }
                                    },
                                    "propertyOrder": [
                                        "id",
                                        "value"
                                    ],
                                    "type": "object"
                                },
                                "title": "properties",
                                "type": "array"
                            }
                        },
                        "propertyOrder": [
                            "matcher",
                            "properties"
                        ],
                        "type": "object"
                    },
                    "title": "overrides",
                    "type": "array"
                }
            },
            "propertyOrder": [
                "defaults",
                "overrides"
            ],
            "title": "FieldConfigSource<PieChartFieldConfig>",
            "type": "object"
        },
        "FieldConfigSource<Record<string,unknown>>": {
            "properties": {
                "defaults": {
                    "$ref": "#/definitions/FieldConfig<Record<string,unknown>>",
                    "title": "defaults"
                },
                "overrides": {
                    "description": "Overrides are the options applied to specific fields overriding the defaults.",
                    "items": {
                        "properties": {
                            "matcher": {
                                "$ref": "#/definitions/MatcherConfig$1",
                                "title": "matcher"
                            },
                            "properties": {
                                "items": {
                                    "properties": {
                                        "id": {
                                            "title": "id",
                                            "type": "string"
                                        },
                                        "value": {
                                            "title": "value"
                                        }
                                    },
                                    "propertyOrder": [
                                        "id",
                                        "value"
                                    ],
                                    "type": "object"
                                },
                                "title": "properties",
                                "type": "array"
                            }
                        },
                        "propertyOrder": [
                            "matcher",
                            "properties"
                        ],
                        "type": "object"
                    },
                    "title": "overrides",
                    "type": "array"
                }
            },
            "propertyOrder": [
                "defaults",
                "overrides"
            ],
            "title": "FieldConfigSource<Record<string,unknown>>",
            "type": "object"
        },
        "FieldConfigSource<TableFieldConfig>": {
            "properties": {
                "defaults": {
                    "$ref": "#/definitions/FieldConfig<TableFieldConfig>",
                    "title": "defaults"
                },
                "overrides": {
                    "description": "Overrides are the options applied to specific fields overriding the defaults.",
                    "items": {
                        "properties": {
                            "matcher": {
                                "$ref": "#/definitions/MatcherConfig$1",
                                "title": "matcher"
                            },
                            "properties": {
                                "items": {
                                    "properties": {
                                        "id": {
                                            "title": "id",
                                            "type": "string"
                                        },
                                        "value": {
                                            "title": "value"
                                        }
                                    },
                                    "propertyOrder": [
                                        "id",
                                        "value"
                                    ],
                                    "type": "object"
                                },
                                "title": "properties",
                                "type": "array"
                            }
                        },
                        "propertyOrder": [
                            "matcher",
                            "properties"
                        ],
                        "type": "object"
                    },
                    "title": "overrides",
                    "type": "array"
                }
            },
            "propertyOrder": [
                "defaults",
                "overrides"
            ],
            "title": "FieldConfigSource<TableFieldConfig>",
            "type": "object"
        },
        "FieldConfigSource<TimeSeriesFieldConfig>": {
            "properties": {
                "defaults": {
                    "$ref": "#/definitions/FieldConfig<TimeSeriesFieldConfig>",
                    "title": "defaults"
                },
                "overrides": {
                    "description": "Overrides are the options applied to specific fields overriding the defaults.",
                    "items": {
                        "properties": {
                            "matcher": {
                                "$ref": "#/definitions/MatcherConfig$1",
                                "title": "matcher"
                            },
                            "properties": {
                                "items": {
                                    "properties": {
                                        "id": {
                                            "title": "id",
                                            "type": "string"
                                        },
                                        "value": {
                                            "title": "value"
                                        }
                                    },
                                    "propertyOrder": [
                                        "id",
                                        "value"
                                    ],
                                    "type": "object"
                                },
                                "title": "properties",
                                "type": "array"
                            }
                        },
                        "propertyOrder": [
                            "matcher",
                            "properties"
                        ],
                        "type": "object"
                    },
                    "title": "overrides",
                    "type": "array"
                }
            },
            "propertyOrder": [
                "defaults",
                "overrides"
            ],
            "title": "FieldConfigSource<TimeSeriesFieldConfig>",
            "type": "object"
        },
        "FieldTextAlignment": {
            "description": "TODO -- should not be table specific!\nTODO docs",
            "enum": [
                "auto",
                "center",
                "left",
                "right"
            ],
            "title": "FieldTextAlignment",
            "type": "string"
        },
        "Gauge": {
            "properties": {
                "cacheTimeout": {
                    "description": "Sets panel queries cache timeout.",
                    "title": "cacheTimeout",
                    "type": "string"
                },
                "datasource": {
                    "$ref": "#/definitions/DataSourceRef_1",
                    "description": "The datasource used in all targets.",
                    "title": "datasource"
                },
                "description": {
                    "description": "Panel description.",
                    "title": "description",
                    "type": "string"
                },
                "fieldConfig": {
                    "$ref": "#/definitions/FieldConfigSource<Record<string,unknown>>",
                    "title": "fieldConfig"
                },
                "gridPos": {
                    "$ref": "#/definitions/GridPos",
                    "description": "Grid position.",
                    "title": "gridPos"
                },
                "hideTimeOverride": {
                    "description": "Controls if the timeFrom or timeShift overrides are shown in the panel header",
                    "title": "hideTimeOverride",
                    "type": "boolean"
                },
                "id": {
                    "description": "Unique identifier of the panel. Generated by Grafana when creating a new panel. It must be unique within a dashboard, but not globally.",
                    "title": "id",
                    "type": "number"
                },
                "interval": {
                    "description": "The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables.\nThis value must be formatted as a number followed by a valid time\nidentifier like: \"40s\", \"3d\", etc.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options",
                    "title": "interval",
                    "type": "string"
                },
                "libraryPanel": {
                    "$ref": "#/definitions/LibraryPanelRef",
                    "description": "Dynamically load the panel",
                    "title": "libraryPanel"
                },
                "links": {
                    "description": "Panel links.",
                    "items": {
                        "$ref": "#/definitions/DashboardLink"
                    },
                    "title": "links",
                    "type": "array"
                },
                "maxDataPoints": {
                    "description": "The maximum number of data points that the panel queries are retrieving.",
                    "title": "maxDataPoints",
                    "type": "number"
                },
                "maxPerRow": {
                    "description": "Option for repeated panels that controls max items per row\nOnly relevant for horizontally repeated panels",
                    "title": "maxPerRow",
                    "type": "number"
                },
                "options": {
                    "$ref": "#/definitions/GaugeOptions",
                    "title": "options"
                },
                "pluginVersion": {
                    "description": "The version of the plugin that is used for this panel. This is used to find the plugin to display the panel and to migrate old panel configs.",
                    "title": "pluginVersion",
                    "type": "string"
                },
                "queryCachingTTL": {
                    "description": "Overrides the data source configured time-to-live for a query cache item in milliseconds",
                    "title": "queryCachingTTL",
                    "type": "number"
                },
                "repeat": {
                    "description": "Name of template variable to repeat for.",
                    "title": "repeat",
                    "type": "string"
                },
                "repeatDirection": {
                    "description": "Direction to repeat in if 'repeat' is set.\n`h` for horizontal, `v` for vertical.",
                    "enum": [
                        "h",
                        "v"
                    ],
                    "title": "repeatDirection",
                    "type": "string"
                },
                "targets": {
                    "items": {
                        "$ref": "#/definitions/PrometheusDataQuery"
                    },
                    "title": "targets",
                    "type": "array"
                },
                "timeFrom": {
                    "description": "Overrides the relative time range for individual panels,\nwhich causes them to be different than what is selected in\nthe dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different\ntime periods or days on the same dashboard.\nThe value is formatted as time operation like: `now-5m` (Last 5 minutes), `now/d` (the day so far),\n`now-5d/d`(Last 5 days), `now/w` (This week so far), `now-2y/y` (Last 2 years).\nNote: Panel time overrides have no effect when the dashboard’s time range is absolute.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options",
                    "title": "timeFrom",
                    "type": "string"
                },
                "timeShift": {
                    "description": "Overrides the time range for individual panels by shifting its start and end relative to the time picker.\nFor example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting `2h`.\nNote: Panel time overrides have no effect when the dashboard’s time range is absolute.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options",
                    "title": "timeShift",
                    "type": "string"
                },
                "title": {
                    "description": "Panel title.",
                    "title": "title",
                    "type": "string"
                },
                "transformations": {
                    "description": "List of transformations that are applied to the panel data before rendering.\nWhen there are multiple transformations, Grafana applies them in the order they are listed.\nEach transformation creates a result set that then passes on to the next transformation in the processing pipeline.",
                    "items": {
                        "$ref": "#/definitions/DataTransformerConfig$1"
                    },
                    "title": "transformations",
                    "type": "array"
                },
                "transparent": {
                    "description": "Whether to display the panel without a background.",
                    "title": "transparent",
                    "type": "boolean"
                },
                "type": {
                    "const": "gauge",
                    "description": "The panel plugin type id. This is used to find the plugin to display the panel.",
                    "title": "type",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "options",
                "targets",
                "fieldConfig",
                "cacheTimeout",
                "datasource",
                "description",
                "gridPos",
                "hideTimeOverride",
                "id",
                "interval",
                "libraryPanel",
                "links",
                "maxDataPoints",
                "maxPerRow",
                "pluginVersion",
                "queryCachingTTL",
                "repeat",
                "repeatDirection",
                "timeFrom",
                "timeShift",
                "title",
                "transformations",
                "transparent"
            ],
            "title": "Gauge",
            "type": "object"
        },
        "GaugeOptions": {
            "properties": {
                "minVizHeight": {
                    "title": "minVizHeight",
                    "type": "number"
                },
                "minVizWidth": {
                    "title": "minVizWidth",
                    "type": "number"
                },
                "orientation": {
                    "$ref": "#/definitions/VizOrientation",
                    "title": "orientation"
                },
                "reduceOptions": {
                    "$ref": "#/definitions/ReduceDataOptions",
                    "title": "reduceOptions"
                },
                "showThresholdLabels": {
                    "title": "showThresholdLabels",
                    "type": "boolean"
                },
                "showThresholdMarkers": {
                    "title": "showThresholdMarkers",
                    "type": "boolean"
                },
                "sizing": {
                    "$ref": "#/definitions/BarGaugeSizing",
                    "title": "sizing"
                },
                "text": {
                    "$ref": "#/definitions/VizTextDisplayOptions",
                    "description": "TODO docs",
                    "title": "text"
                }
            },
            "propertyOrder": [
                "minVizHeight",
                "minVizWidth",
                "showThresholdLabels",
                "showThresholdMarkers",
                "sizing",
                "orientation",
                "reduceOptions",
                "text"
            ],
            "title": "GaugeOptions",
            "type": "object"
        },
        "GraphThresholdsStyleConfig": {
            "description": "TODO docs",
            "properties": {
                "mode": {
                    "$ref": "#/definitions/GraphThresholdsStyleMode",
                    "title": "mode"
                }
            },
            "propertyOrder": [
                "mode"
            ],
            "title": "GraphThresholdsStyleConfig",
            "type": "object"
        },
        "GraphThresholdsStyleMode": {
            "description": "TODO docs",
            "enum": [
                "area",
                "dashed",
                "dashed+area",
                "line",
                "line+area",
                "off",
                "series"
            ],
            "title": "GraphThresholdsStyleMode",
            "type": "string"
        },
        "GridPos": {
            "description": "Position and dimensions of a panel in the grid",
            "properties": {
                "h": {
                    "description": "Panel height. The height is the number of rows from the top edge of the panel.",
                    "title": "h",
                    "type": "number"
                },
                "static": {
                    "description": "Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions",
                    "title": "static",
                    "type": "boolean"
                },
                "w": {
                    "description": "Panel width. The width is the number of columns from the left edge of the panel.",
                    "title": "w",
                    "type": "number"
                },
                "x": {
                    "description": "Panel x. The x coordinate is the number of columns from the left edge of the grid",
                    "title": "x",
                    "type": "number"
                },
                "y": {
                    "description": "Panel y. The y coordinate is the number of rows from the top edge of the grid",
                    "title": "y",
                    "type": "number"
                }
            },
            "propertyOrder": [
                "h",
                "static",
                "w",
                "x",
                "y"
            ],
            "title": "GridPos",
            "type": "object"
        },
        "HideSeriesConfig": {
            "description": "TODO docs",
            "properties": {
                "legend": {
                    "title": "legend",
                    "type": "boolean"
                },
                "tooltip": {
                    "title": "tooltip",
                    "type": "boolean"
                },
                "viz": {
                    "title": "viz",
                    "type": "boolean"
                }
            },
            "propertyOrder": [
                "legend",
                "tooltip",
                "viz"
            ],
            "title": "HideSeriesConfig",
            "type": "object"
        },
        "LegendDisplayMode": {
            "description": "TODO docs\nNote: \"hidden\" needs to remain as an option for plugins compatibility",
            "enum": [
                "hidden",
                "list",
                "table"
            ],
            "title": "LegendDisplayMode",
            "type": "string"
        },
        "LegendPlacement": {
            "description": "TODO docs",
            "enum": [
                "bottom",
                "right"
            ],
            "title": "LegendPlacement",
            "type": "string"
        },
        "LibraryPanelRef": {
            "description": "A library panel is a reusable panel that you can use in any dashboard.\nWhen you make a change to a library panel, that change propagates to all instances of where the panel is used.\nLibrary panels streamline reuse of panels across multiple dashboards.",
            "properties": {
                "name": {
                    "description": "Library panel name",
                    "title": "name",
                    "type": "string"
                },
                "uid": {
                    "description": "Library panel uid",
                    "title": "uid",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "name",
                "uid"
            ],
            "title": "LibraryPanelRef",
            "type": "object"
        },
        "LineStyle": {
            "description": "TODO docs",
            "properties": {
                "dash": {
                    "items": {
                        "type": "number"
                    },
                    "title": "dash",
                    "type": "array"
                },
                "fill": {
                    "enum": [
                        "dash",
                        "dot",
                        "solid",
                        "square"
                    ],
                    "title": "fill",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "dash",
                "fill"
            ],
            "title": "LineStyle",
            "type": "object"
        },
        "MatcherConfig$1": {
            "description": "Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation.\nIt comes with in id ( to resolve implementation from registry) and a configuration that’s specific to a particular matcher type.",
            "properties": {
                "id": {
                    "description": "The matcher id. This is used to find the matcher implementation from registry.",
                    "title": "id",
                    "type": "string"
                },
                "options": {
                    "description": "The matcher options. This is specific to the matcher implementation.",
                    "title": "options"
                }
            },
            "propertyOrder": [
                "id",
                "options"
            ],
            "title": "MatcherConfig$1",
            "type": "object"
        },
        "PercentChangeColorMode": {
            "description": "TODO docs",
            "enum": [
                "inverted",
                "same_as_value",
                "standard"
            ],
            "title": "PercentChangeColorMode",
            "type": "string"
        },
        "Pick<{name:string;},\"name\">": {
            "properties": {
                "name": {
                    "title": "name",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "name"
            ],
            "title": "Pick<{name:string;},\"name\">",
            "type": "object"
        },
        "PieChart": {
            "properties": {
                "cacheTimeout": {
                    "description": "Sets panel queries cache timeout.",
                    "title": "cacheTimeout",
                    "type": "string"
                },
                "datasource": {
                    "$ref": "#/definitions/DataSourceRef_1",
                    "description": "The datasource used in all targets.",
                    "title": "datasource"
                },
                "description": {
                    "description": "Panel description.",
                    "title": "description",
                    "type": "string"
                },
                "fieldConfig": {
                    "$ref": "#/definitions/FieldConfigSource<PieChartFieldConfig>",
                    "title": "fieldConfig"
                },
                "gridPos": {
                    "$ref": "#/definitions/GridPos",
                    "description": "Grid position.",
                    "title": "gridPos"
                },
                "hideTimeOverride": {
                    "description": "Controls if the timeFrom or timeShift overrides are shown in the panel header",
                    "title": "hideTimeOverride",
                    "type": "boolean"
                },
                "id": {
                    "description": "Unique identifier of the panel. Generated by Grafana when creating a new panel. It must be unique within a dashboard, but not globally.",
                    "title": "id",
                    "type": "number"
                },
                "interval": {
                    "description": "The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables.\nThis value must be formatted as a number followed by a valid time\nidentifier like: \"40s\", \"3d\", etc.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options",
                    "title": "interval",
                    "type": "string"
                },
                "libraryPanel": {
                    "$ref": "#/definitions/LibraryPanelRef",
                    "description": "Dynamically load the panel",
                    "title": "libraryPanel"
                },
                "links": {
                    "description": "Panel links.",
                    "items": {
                        "$ref": "#/definitions/DashboardLink"
                    },
                    "title": "links",
                    "type": "array"
                },
                "maxDataPoints": {
                    "description": "The maximum number of data points that the panel queries are retrieving.",
                    "title": "maxDataPoints",
                    "type": "number"
                },
                "maxPerRow": {
                    "description": "Option for repeated panels that controls max items per row\nOnly relevant for horizontally repeated panels",
                    "title": "maxPerRow",
                    "type": "number"
                },
                "options": {
                    "$ref": "#/definitions/PieChartOptions",
                    "title": "options"
                },
                "pluginVersion": {
                    "description": "The version of the plugin that is used for this panel. This is used to find the plugin to display the panel and to migrate old panel configs.",
                    "title": "pluginVersion",
                    "type": "string"
                },
                "queryCachingTTL": {
                    "description": "Overrides the data source configured time-to-live for a query cache item in milliseconds",
                    "title": "queryCachingTTL",
                    "type": "number"
                },
                "repeat": {
                    "description": "Name of template variable to repeat for.",
                    "title": "repeat",
                    "type": "string"
                },
                "repeatDirection": {
                    "description": "Direction to repeat in if 'repeat' is set.\n`h` for horizontal, `v` for vertical.",
                    "enum": [
                        "h",
                        "v"
                    ],
                    "title": "repeatDirection",
                    "type": "string"
                },
                "targets": {
                    "items": {
                        "$ref": "#/definitions/PrometheusDataQuery"
                    },
                    "title": "targets",
                    "type": "array"
                },
                "timeFrom": {
                    "description": "Overrides the relative time range for individual panels,\nwhich causes them to be different than what is selected in\nthe dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different\ntime periods or days on the same dashboard.\nThe value is formatted as time operation like: `now-5m` (Last 5 minutes), `now/d` (the day so far),\n`now-5d/d`(Last 5 days), `now/w` (This week so far), `now-2y/y` (Last 2 years).\nNote: Panel time overrides have no effect when the dashboard’s time range is absolute.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options",
                    "title": "timeFrom",
                    "type": "string"
                },
                "timeShift": {
                    "description": "Overrides the time range for individual panels by shifting its start and end relative to the time picker.\nFor example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting `2h`.\nNote: Panel time overrides have no effect when the dashboard’s time range is absolute.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options",
                    "title": "timeShift",
                    "type": "string"
                },
                "title": {
                    "description": "Panel title.",
                    "title": "title",
                    "type": "string"
                },
                "transformations": {
                    "description": "List of transformations that are applied to the panel data before rendering.\nWhen there are multiple transformations, Grafana applies them in the order they are listed.\nEach transformation creates a result set that then passes on to the next transformation in the processing pipeline.",
                    "items": {
                        "$ref": "#/definitions/DataTransformerConfig$1"
                    },
                    "title": "transformations",
                    "type": "array"
                },
                "transparent": {
                    "description": "Whether to display the panel without a background.",
                    "title": "transparent",
                    "type": "boolean"
                },
                "type": {
                    "const": "piechart",
                    "description": "The panel plugin type id. This is used to find the plugin to display the panel.",
                    "title": "type",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "options",
                "targets",
                "fieldConfig",
                "cacheTimeout",
                "datasource",
                "description",
                "gridPos",
                "hideTimeOverride",
                "id",
                "interval",
                "libraryPanel",
                "links",
                "maxDataPoints",
                "maxPerRow",
                "pluginVersion",
                "queryCachingTTL",
                "repeat",
                "repeatDirection",
                "timeFrom",
                "timeShift",
                "title",
                "transformations",
                "transparent"
            ],
            "title": "PieChart",
            "type": "object"
        },
        "PieChartFieldConfig": {
            "properties": {
                "hideFrom": {
                    "$ref": "#/definitions/HideSeriesConfig",
                    "description": "TODO docs",
                    "title": "hideFrom"
                }
            },
            "propertyOrder": [
                "hideFrom"
            ],
            "title": "PieChartFieldConfig",
            "type": "object"
        },
        "PieChartLabels": {
            "description": "Select labels to display on the pie chart.\n - Name - The series or field name.\n - Percent - The percentage of the whole.\n - Value - The raw numerical value.",
            "enum": [
                "name",
                "percent",
                "value"
            ],
            "title": "PieChartLabels",
            "type": "string"
        },
        "PieChartLegendOptions": {
            "properties": {
                "asTable": {
                    "title": "asTable",
                    "type": "boolean"
                },
                "calcs": {
                    "items": {
                        "type": "string"
                    },
                    "title": "calcs",
                    "type": "array"
                },
                "displayMode": {
                    "$ref": "#/definitions/LegendDisplayMode",
                    "title": "displayMode"
                },
                "isVisible": {
                    "title": "isVisible",
                    "type": "boolean"
                },
                "placement": {
                    "$ref": "#/definitions/LegendPlacement",
                    "title": "placement"
                },
                "showLegend": {
                    "title": "showLegend",
                    "type": "boolean"
                },
                "sortBy": {
                    "title": "sortBy",
                    "type": "string"
                },
                "sortDesc": {
                    "title": "sortDesc",
                    "type": "boolean"
                },
                "values": {
                    "items": {
                        "$ref": "#/definitions/PieChartLegendValues"
                    },
                    "title": "values",
                    "type": "array"
                },
                "width": {
                    "title": "width",
                    "type": "number"
                }
            },
            "propertyOrder": [
                "values",
                "asTable",
                "calcs",
                "displayMode",
                "isVisible",
                "placement",
                "showLegend",
                "sortBy",
                "sortDesc",
                "width"
            ],
            "title": "PieChartLegendOptions",
            "type": "object"
        },
        "PieChartLegendValues": {
            "description": "Select values to display in the legend.\n - Percent: The percentage of the whole.\n - Value: The raw numerical value.",
            "enum": [
                "percent",
                "value"
            ],
            "title": "PieChartLegendValues",
            "type": "string"
        },
        "PieChartOptions": {
            "properties": {
                "displayLabels": {
                    "items": {
                        "$ref": "#/definitions/PieChartLabels"
                    },
                    "title": "displayLabels",
                    "type": "array"
                },
                "legend": {
                    "$ref": "#/definitions/PieChartLegendOptions",
                    "title": "legend"
                },
                "orientation": {
                    "$ref": "#/definitions/VizOrientation",
                    "title": "orientation"
                },
                "pieType": {
                    "$ref": "#/definitions/PieChartType",
                    "title": "pieType"
                },
                "reduceOptions": {
                    "$ref": "#/definitions/ReduceDataOptions",
                    "title": "reduceOptions"
                },
                "text": {
                    "$ref": "#/definitions/VizTextDisplayOptions",
                    "description": "TODO docs",
                    "title": "text"
                },
                "tooltip": {
                    "$ref": "#/definitions/VizTooltipOptions",
                    "title": "tooltip"
                }
            },
            "propertyOrder": [
                "displayLabels",
                "legend",
                "pieType",
                "tooltip",
                "orientation",
                "reduceOptions",
                "text"
            ],
            "title": "PieChartOptions",
            "type": "object"
        },
        "PieChartType": {
            "description": "Select the pie chart display style.",
            "enum": [
                "donut",
                "pie"
            ],
            "title": "PieChartType",
            "type": "string"
        },
        "PluginPanel": {
            "anyOf": [
                {
                    "$ref": "#/definitions/BarGauge"
                },
                {
                    "$ref": "#/definitions/BarChart"
                },
                {
                    "$ref": "#/definitions/Gauge"
                },
                {
                    "$ref": "#/definitions/PieChart"
                },
                {
                    "$ref": "#/definitions/Stat"
                },
                {
                    "$ref": "#/definitions/Table"
                },
                {
                    "$ref": "#/definitions/TimeSeries"
                }
            ],
            "title": "PluginPanel"
        },
        "PrometheusDataQuery": {
            "properties": {
                "adhocFilters": {
                    "items": {
                        "$ref": "#/definitions/ScopeSpecFilter"
                    },
                    "title": "adhocFilters",
                    "type": "array"
                },
                "datasource": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DataSourceRef"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "For mixed data sources the selected datasource is on the query level.\nFor non mixed scenarios this is undefined.\nTODO find a better way to do this ^ that's friendly to schema\nTODO this shouldn't be unknown but DataSourceRef | null",
                    "title": "datasource"
                },
                "editorMode": {
                    "description": "Specifies which editor is being used to prepare the query. It can be \"code\" or \"builder\"",
                    "enum": [
                        "builder",
                        "code"
                    ],
                    "title": "editorMode",
                    "type": "string"
                },
                "exemplar": {
                    "description": "Execute an additional query to identify interesting raw samples relevant for the given expr",
                    "title": "exemplar",
                    "type": "boolean"
                },
                "expr": {
                    "description": "The actual expression/query that will be evaluated by Prometheus",
                    "title": "expr",
                    "type": "string"
                },
                "format": {
                    "description": "Query format to determine how to display data points in panel. It can be \"time_series\", \"table\", \"heatmap\"",
                    "enum": [
                        "heatmap",
                        "table",
                        "time_series"
                    ],
                    "title": "format",
                    "type": "string"
                },
                "groupByKeys": {
                    "items": {
                        "type": "string"
                    },
                    "title": "groupByKeys",
                    "type": "array"
                },
                "hide": {
                    "description": "If hide is set to true, Grafana will filter out the response(s) associated with this query before returning it to the panel.",
                    "title": "hide",
                    "type": "boolean"
                },
                "instant": {
                    "description": "Returns only the latest value that Prometheus has scraped for the requested time series",
                    "title": "instant",
                    "type": "boolean"
                },
                "intervalFactor": {
                    "title": "intervalFactor",
                    "type": "number"
                },
                "key": {
                    "description": "Unique, guid like, string (used only in explore mode)",
                    "title": "key",
                    "type": "string"
                },
                "legendFormat": {
                    "description": "Series name override or template. Ex. {{hostname}} will be replaced with label value for hostname",
                    "title": "legendFormat",
                    "type": "string"
                },
                "queryType": {
                    "description": "Specify the query flavor\nTODO make this required and give it a default",
                    "title": "queryType",
                    "type": "string"
                },
                "range": {
                    "description": "Returns a Range vector, comprised of a set of time series containing a range of data points over time for each time series",
                    "title": "range",
                    "type": "boolean"
                },
                "refId": {
                    "description": "A unique identifier for the query within the list of targets.\nIn server side expressions, the refId is used as a variable name to identify results.\nBy default, the UI will assign A->Z; however setting meaningful names may be useful.",
                    "title": "refId",
                    "type": "string"
                },
                "scopes": {
                    "items": {
                        "allOf": [
                            {
                                "$ref": "#/definitions/ScopeSpec"
                            },
                            {
                                "$ref": "#/definitions/Pick<{name:string;},\"name\">"
                            }
                        ]
                    },
                    "title": "scopes",
                    "type": "array"
                }
            },
            "propertyOrder": [
                "editorMode",
                "exemplar",
                "expr",
                "format",
                "instant",
                "intervalFactor",
                "legendFormat",
                "range",
                "scopes",
                "adhocFilters",
                "groupByKeys",
                "key",
                "datasource",
                "hide",
                "queryType",
                "refId"
            ],
            "title": "PrometheusDataQuery",
            "type": "object"
        },
        "RangeMap": {
            "description": "Maps numerical ranges to a display text and color.\nFor example, if a value is within a certain range, you can configure a range value mapping to display Low or High rather than the number.",
            "properties": {
                "options": {
                    "description": "Range to match against and the result to apply when the value is within the range",
                    "properties": {
                        "from": {
                            "description": "Min value of the range. It can be null which means -Infinity",
                            "title": "from",
                            "type": [
                                "null",
                                "number"
                            ]
                        },
                        "result": {
                            "$ref": "#/definitions/ValueMappingResult",
                            "description": "Config to apply when the value is within the range",
                            "title": "result"
                        },
                        "to": {
                            "description": "Max value of the range. It can be null which means +Infinity",
                            "title": "to",
                            "type": [
                                "null",
                                "number"
                            ]
                        }
                    },
                    "propertyOrder": [
                        "from",
                        "to",
                        "result"
                    ],
                    "title": "options",
                    "type": "object"
                },
                "type": {
                    "const": "range",
                    "title": "type",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "options",
                "type"
            ],
            "title": "RangeMap",
            "type": "object"
        },
        "Record<string,ValueMappingResult>": {
            "propertyOrder": [],
            "title": "Record<string,ValueMappingResult>",
            "type": "object"
        },
        "Record<string,unknown>": {
            "propertyOrder": [],
            "title": "Record<string,unknown>",
            "type": "object"
        },
        "ReduceDataOptions": {
            "description": "TODO docs",
            "properties": {
                "calcs": {
                    "description": "When !values, pick one value for the whole field",
                    "items": {
                        "type": "string"
                    },
                    "title": "calcs",
                    "type": "array"
                },
                "fields": {
                    "description": "Which fields to show.  By default this is only numeric fields",
                    "title": "fields",
                    "type": "string"
                },
                "limit": {
                    "description": "if showing all values limit",
                    "title": "limit",
                    "type": "number"
                },
                "values": {
                    "description": "If true show each row value",
                    "title": "values",
                    "type": "boolean"
                }
            },
            "propertyOrder": [
                "calcs",
                "fields",
                "limit",
                "values"
            ],
            "title": "ReduceDataOptions",
            "type": "object"
        },
        "RegexMap": {
            "description": "Maps regular expressions to replacement text and a color.\nFor example, if a value is www.example.com, you can configure a regex value mapping so that Grafana displays www and truncates the domain.",
            "properties": {
                "options": {
                    "description": "Regular expression to match against and the result to apply when the value matches the regex",
                    "properties": {
                        "pattern": {
                            "description": "Regular expression to match against",
                            "title": "pattern",
                            "type": "string"
                        },
                        "result": {
                            "$ref": "#/definitions/ValueMappingResult",
                            "description": "Config to apply when the value matches the regex",
                            "title": "result"
                        }
                    },
                    "propertyOrder": [
                        "pattern",
                        "result"
                    ],
                    "title": "options",
                    "type": "object"
                },
                "type": {
                    "const": "regex",
                    "title": "type",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "options",
                "type"
            ],
            "title": "RegexMap",
            "type": "object"
        },
        "RowPanel": {
            "properties": {
                "collapsed": {
                    "description": "Whether this row should be collapsed or not.",
                    "title": "collapsed",
                    "type": "boolean"
                },
                "datasource": {
                    "$ref": "#/definitions/DataSourceRef_1",
                    "description": "Name of default datasource for the row",
                    "title": "datasource"
                },
                "gridPos": {
                    "$ref": "#/definitions/GridPos",
                    "description": "Row grid position",
                    "title": "gridPos"
                },
                "id": {
                    "description": "Unique identifier of the panel. Generated by Grafana when creating a new panel. It must be unique within a dashboard, but not globally.",
                    "title": "id",
                    "type": "number"
                },
                "panels": {
                    "items": {
                        "$ref": "#/definitions/PluginPanel"
                    },
                    "title": "panels",
                    "type": "array"
                },
                "repeat": {
                    "description": "Name of template variable to repeat for.",
                    "title": "repeat",
                    "type": "string"
                },
                "title": {
                    "description": "Row title",
                    "title": "title",
                    "type": "string"
                },
                "type": {
                    "const": "row",
                    "description": "The panel type",
                    "title": "type",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "panels",
                "datasource",
                "gridPos",
                "id",
                "repeat",
                "title",
                "type",
                "collapsed"
            ],
            "title": "RowPanel",
            "type": "object"
        },
        "ScaleDistribution": {
            "description": "TODO docs",
            "enum": [
                "linear",
                "log",
                "ordinal",
                "symlog"
            ],
            "title": "ScaleDistribution",
            "type": "string"
        },
        "ScaleDistributionConfig": {
            "description": "TODO docs",
            "properties": {
                "linearThreshold": {
                    "title": "linearThreshold",
                    "type": "number"
                },
                "log": {
                    "title": "log",
                    "type": "number"
                },
                "type": {
                    "$ref": "#/definitions/ScaleDistribution",
                    "title": "type"
                }
            },
            "propertyOrder": [
                "linearThreshold",
                "log",
                "type"
            ],
            "title": "ScaleDistributionConfig",
            "type": "object"
        },
        "ScopeFilterOperator": {
            "enum": [
                "equals",
                "not-equals",
                "not-one-of",
                "one-of",
                "regex-match",
                "regex-not-match"
            ],
            "title": "ScopeFilterOperator",
            "type": "string"
        },
        "ScopeSpec": {
            "properties": {
                "category": {
                    "title": "category",
                    "type": "string"
                },
                "description": {
                    "title": "description",
                    "type": "string"
                },
                "filters": {
                    "items": {
                        "$ref": "#/definitions/ScopeSpecFilter"
                    },
                    "title": "filters",
                    "type": "array"
                },
                "title": {
                    "title": "title",
                    "type": "string"
                },
                "type": {
                    "title": "type",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "title",
                "type",
                "description",
                "category",
                "filters"
            ],
            "title": "ScopeSpec",
            "type": "object"
        },
        "ScopeSpecFilter": {
            "properties": {
                "key": {
                    "title": "key",
                    "type": "string"
                },
                "operator": {
                    "$ref": "#/definitions/ScopeFilterOperator",
                    "title": "operator"
                },
                "value": {
                    "title": "value",
                    "type": "string"
                },
                "values": {
                    "items": {
                        "type": "string"
                    },
                    "title": "values",
                    "type": "array"
                }
            },
            "propertyOrder": [
                "key",
                "value",
                "values",
                "operator"
            ],
            "title": "ScopeSpecFilter",
            "type": "object"
        },
        "SortOrder": {
            "description": "TODO docs",
            "enum": [
                "asc",
                "desc",
                "none"
            ],
            "title": "SortOrder",
            "type": "string"
        },
        "SpecialValueMap": {
            "description": "Maps special values like Null, NaN (not a number), and boolean values like true and false to a display text and color.\nSee SpecialValueMatch to see the list of special values.\nFor example, you can configure a special value mapping so that null values appear as N/A.",
            "properties": {
                "options": {
                    "properties": {
                        "match": {
                            "$ref": "#/definitions/SpecialValueMatch",
                            "description": "Special value to match against",
                            "title": "match"
                        },
                        "result": {
                            "$ref": "#/definitions/ValueMappingResult",
                            "description": "Config to apply when the value matches the special value",
                            "title": "result"
                        }
                    },
                    "propertyOrder": [
                        "match",
                        "result"
                    ],
                    "title": "options",
                    "type": "object"
                },
                "type": {
                    "const": "special",
                    "title": "type",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "options",
                "type"
            ],
            "title": "SpecialValueMap",
            "type": "object"
        },
        "SpecialValueMatch": {
            "description": "Special value types supported by the `SpecialValueMap`",
            "enum": [
                "empty",
                "false",
                "nan",
                "null",
                "null+nan",
                "true"
            ],
            "title": "SpecialValueMatch",
            "type": "string"
        },
        "StackingConfig": {
            "description": "TODO docs",
            "properties": {
                "group": {
                    "title": "group",
                    "type": "string"
                },
                "mode": {
                    "description": "TODO docs",
                    "enum": [
                        "none",
                        "normal",
                        "percent"
                    ],
                    "title": "mode",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "group",
                "mode"
            ],
            "title": "StackingConfig",
            "type": "object"
        },
        "StackingMode": {
            "description": "TODO docs",
            "enum": [
                "none",
                "normal",
                "percent"
            ],
            "title": "StackingMode",
            "type": "string"
        },
        "Stat": {
            "properties": {
                "cacheTimeout": {
                    "description": "Sets panel queries cache timeout.",
                    "title": "cacheTimeout",
                    "type": "string"
                },
                "datasource": {
                    "$ref": "#/definitions/DataSourceRef_1",
                    "description": "The datasource used in all targets.",
                    "title": "datasource"
                },
                "description": {
                    "description": "Panel description.",
                    "title": "description",
                    "type": "string"
                },
                "fieldConfig": {
                    "$ref": "#/definitions/FieldConfigSource<Record<string,unknown>>",
                    "title": "fieldConfig"
                },
                "gridPos": {
                    "$ref": "#/definitions/GridPos",
                    "description": "Grid position.",
                    "title": "gridPos"
                },
                "hideTimeOverride": {
                    "description": "Controls if the timeFrom or timeShift overrides are shown in the panel header",
                    "title": "hideTimeOverride",
                    "type": "boolean"
                },
                "id": {
                    "description": "Unique identifier of the panel. Generated by Grafana when creating a new panel. It must be unique within a dashboard, but not globally.",
                    "title": "id",
                    "type": "number"
                },
                "interval": {
                    "description": "The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables.\nThis value must be formatted as a number followed by a valid time\nidentifier like: \"40s\", \"3d\", etc.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options",
                    "title": "interval",
                    "type": "string"
                },
                "libraryPanel": {
                    "$ref": "#/definitions/LibraryPanelRef",
                    "description": "Dynamically load the panel",
                    "title": "libraryPanel"
                },
                "links": {
                    "description": "Panel links.",
                    "items": {
                        "$ref": "#/definitions/DashboardLink"
                    },
                    "title": "links",
                    "type": "array"
                },
                "maxDataPoints": {
                    "description": "The maximum number of data points that the panel queries are retrieving.",
                    "title": "maxDataPoints",
                    "type": "number"
                },
                "maxPerRow": {
                    "description": "Option for repeated panels that controls max items per row\nOnly relevant for horizontally repeated panels",
                    "title": "maxPerRow",
                    "type": "number"
                },
                "options": {
                    "$ref": "#/definitions/StatOptions",
                    "title": "options"
                },
                "pluginVersion": {
                    "description": "The version of the plugin that is used for this panel. This is used to find the plugin to display the panel and to migrate old panel configs.",
                    "title": "pluginVersion",
                    "type": "string"
                },
                "queryCachingTTL": {
                    "description": "Overrides the data source configured time-to-live for a query cache item in milliseconds",
                    "title": "queryCachingTTL",
                    "type": "number"
                },
                "repeat": {
                    "description": "Name of template variable to repeat for.",
                    "title": "repeat",
                    "type": "string"
                },
                "repeatDirection": {
                    "description": "Direction to repeat in if 'repeat' is set.\n`h` for horizontal, `v` for vertical.",
                    "enum": [
                        "h",
                        "v"
                    ],
                    "title": "repeatDirection",
                    "type": "string"
                },
                "targets": {
                    "items": {
                        "$ref": "#/definitions/PrometheusDataQuery"
                    },
                    "title": "targets",
                    "type": "array"
                },
                "timeFrom": {
                    "description": "Overrides the relative time range for individual panels,\nwhich causes them to be different than what is selected in\nthe dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different\ntime periods or days on the same dashboard.\nThe value is formatted as time operation like: `now-5m` (Last 5 minutes), `now/d` (the day so far),\n`now-5d/d`(Last 5 days), `now/w` (This week so far), `now-2y/y` (Last 2 years).\nNote: Panel time overrides have no effect when the dashboard’s time range is absolute.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options",
                    "title": "timeFrom",
                    "type": "string"
                },
                "timeShift": {
                    "description": "Overrides the time range for individual panels by shifting its start and end relative to the time picker.\nFor example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting `2h`.\nNote: Panel time overrides have no effect when the dashboard’s time range is absolute.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options",
                    "title": "timeShift",
                    "type": "string"
                },
                "title": {
                    "description": "Panel title.",
                    "title": "title",
                    "type": "string"
                },
                "transformations": {
                    "description": "List of transformations that are applied to the panel data before rendering.\nWhen there are multiple transformations, Grafana applies them in the order they are listed.\nEach transformation creates a result set that then passes on to the next transformation in the processing pipeline.",
                    "items": {
                        "$ref": "#/definitions/DataTransformerConfig$1"
                    },
                    "title": "transformations",
                    "type": "array"
                },
                "transparent": {
                    "description": "Whether to display the panel without a background.",
                    "title": "transparent",
                    "type": "boolean"
                },
                "type": {
                    "const": "stat",
                    "description": "The panel plugin type id. This is used to find the plugin to display the panel.",
                    "title": "type",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "options",
                "targets",
                "fieldConfig",
                "cacheTimeout",
                "datasource",
                "description",
                "gridPos",
                "hideTimeOverride",
                "id",
                "interval",
                "libraryPanel",
                "links",
                "maxDataPoints",
                "maxPerRow",
                "pluginVersion",
                "queryCachingTTL",
                "repeat",
                "repeatDirection",
                "timeFrom",
                "timeShift",
                "title",
                "transformations",
                "transparent"
            ],
            "title": "Stat",
            "type": "object"
        },
        "StatOptions": {
            "properties": {
                "colorMode": {
                    "$ref": "#/definitions/BigValueColorMode",
                    "title": "colorMode"
                },
                "graphMode": {
                    "$ref": "#/definitions/BigValueGraphMode",
                    "title": "graphMode"
                },
                "justifyMode": {
                    "$ref": "#/definitions/BigValueJustifyMode",
                    "title": "justifyMode"
                },
                "orientation": {
                    "$ref": "#/definitions/VizOrientation",
                    "title": "orientation"
                },
                "percentChangeColorMode": {
                    "$ref": "#/definitions/PercentChangeColorMode",
                    "title": "percentChangeColorMode"
                },
                "reduceOptions": {
                    "$ref": "#/definitions/ReduceDataOptions",
                    "title": "reduceOptions"
                },
                "showPercentChange": {
                    "title": "showPercentChange",
                    "type": "boolean"
                },
                "text": {
                    "$ref": "#/definitions/VizTextDisplayOptions",
                    "description": "TODO docs",
                    "title": "text"
                },
                "textMode": {
                    "$ref": "#/definitions/BigValueTextMode",
                    "title": "textMode"
                },
                "wideLayout": {
                    "title": "wideLayout",
                    "type": "boolean"
                }
            },
            "propertyOrder": [
                "colorMode",
                "graphMode",
                "justifyMode",
                "percentChangeColorMode",
                "showPercentChange",
                "textMode",
                "wideLayout",
                "orientation",
                "reduceOptions",
                "text"
            ],
            "title": "StatOptions",
            "type": "object"
        },
        "Table": {
            "properties": {
                "cacheTimeout": {
                    "description": "Sets panel queries cache timeout.",
                    "title": "cacheTimeout",
                    "type": "string"
                },
                "datasource": {
                    "$ref": "#/definitions/DataSourceRef_1",
                    "description": "The datasource used in all targets.",
                    "title": "datasource"
                },
                "description": {
                    "description": "Panel description.",
                    "title": "description",
                    "type": "string"
                },
                "fieldConfig": {
                    "$ref": "#/definitions/FieldConfigSource<TableFieldConfig>",
                    "title": "fieldConfig"
                },
                "gridPos": {
                    "$ref": "#/definitions/GridPos",
                    "description": "Grid position.",
                    "title": "gridPos"
                },
                "hideTimeOverride": {
                    "description": "Controls if the timeFrom or timeShift overrides are shown in the panel header",
                    "title": "hideTimeOverride",
                    "type": "boolean"
                },
                "id": {
                    "description": "Unique identifier of the panel. Generated by Grafana when creating a new panel. It must be unique within a dashboard, but not globally.",
                    "title": "id",
                    "type": "number"
                },
                "interval": {
                    "description": "The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables.\nThis value must be formatted as a number followed by a valid time\nidentifier like: \"40s\", \"3d\", etc.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options",
                    "title": "interval",
                    "type": "string"
                },
                "libraryPanel": {
                    "$ref": "#/definitions/LibraryPanelRef",
                    "description": "Dynamically load the panel",
                    "title": "libraryPanel"
                },
                "links": {
                    "description": "Panel links.",
                    "items": {
                        "$ref": "#/definitions/DashboardLink"
                    },
                    "title": "links",
                    "type": "array"
                },
                "maxDataPoints": {
                    "description": "The maximum number of data points that the panel queries are retrieving.",
                    "title": "maxDataPoints",
                    "type": "number"
                },
                "maxPerRow": {
                    "description": "Option for repeated panels that controls max items per row\nOnly relevant for horizontally repeated panels",
                    "title": "maxPerRow",
                    "type": "number"
                },
                "options": {
                    "$ref": "#/definitions/TableOptions",
                    "title": "options"
                },
                "pluginVersion": {
                    "description": "The version of the plugin that is used for this panel. This is used to find the plugin to display the panel and to migrate old panel configs.",
                    "title": "pluginVersion",
                    "type": "string"
                },
                "queryCachingTTL": {
                    "description": "Overrides the data source configured time-to-live for a query cache item in milliseconds",
                    "title": "queryCachingTTL",
                    "type": "number"
                },
                "repeat": {
                    "description": "Name of template variable to repeat for.",
                    "title": "repeat",
                    "type": "string"
                },
                "repeatDirection": {
                    "description": "Direction to repeat in if 'repeat' is set.\n`h` for horizontal, `v` for vertical.",
                    "enum": [
                        "h",
                        "v"
                    ],
                    "title": "repeatDirection",
                    "type": "string"
                },
                "targets": {
                    "items": {
                        "$ref": "#/definitions/PrometheusDataQuery"
                    },
                    "title": "targets",
                    "type": "array"
                },
                "timeFrom": {
                    "description": "Overrides the relative time range for individual panels,\nwhich causes them to be different than what is selected in\nthe dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different\ntime periods or days on the same dashboard.\nThe value is formatted as time operation like: `now-5m` (Last 5 minutes), `now/d` (the day so far),\n`now-5d/d`(Last 5 days), `now/w` (This week so far), `now-2y/y` (Last 2 years).\nNote: Panel time overrides have no effect when the dashboard’s time range is absolute.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options",
                    "title": "timeFrom",
                    "type": "string"
                },
                "timeShift": {
                    "description": "Overrides the time range for individual panels by shifting its start and end relative to the time picker.\nFor example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting `2h`.\nNote: Panel time overrides have no effect when the dashboard’s time range is absolute.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options",
                    "title": "timeShift",
                    "type": "string"
                },
                "title": {
                    "description": "Panel title.",
                    "title": "title",
                    "type": "string"
                },
                "transformations": {
                    "description": "List of transformations that are applied to the panel data before rendering.\nWhen there are multiple transformations, Grafana applies them in the order they are listed.\nEach transformation creates a result set that then passes on to the next transformation in the processing pipeline.",
                    "items": {
                        "$ref": "#/definitions/DataTransformerConfig$1"
                    },
                    "title": "transformations",
                    "type": "array"
                },
                "transparent": {
                    "description": "Whether to display the panel without a background.",
                    "title": "transparent",
                    "type": "boolean"
                },
                "type": {
                    "const": "table",
                    "description": "The panel plugin type id. This is used to find the plugin to display the panel.",
                    "title": "type",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "options",
                "targets",
                "fieldConfig",
                "cacheTimeout",
                "datasource",
                "description",
                "gridPos",
                "hideTimeOverride",
                "id",
                "interval",
                "libraryPanel",
                "links",
                "maxDataPoints",
                "maxPerRow",
                "pluginVersion",
                "queryCachingTTL",
                "repeat",
                "repeatDirection",
                "timeFrom",
                "timeShift",
                "title",
                "transformations",
                "transparent"
            ],
            "title": "Table",
            "type": "object"
        },
        "TableActionsCellOptions": {
            "description": "Show actions in the cell",
            "properties": {
                "type": {
                    "const": "actions",
                    "title": "type",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type"
            ],
            "title": "TableActionsCellOptions",
            "type": "object"
        },
        "TableAutoCellOptions": {
            "description": "Auto mode table cell options",
            "properties": {
                "type": {
                    "const": "auto",
                    "title": "type",
                    "type": "string"
                },
                "wrapText": {
                    "title": "wrapText",
                    "type": "boolean"
                }
            },
            "propertyOrder": [
                "type",
                "wrapText"
            ],
            "title": "TableAutoCellOptions",
            "type": "object"
        },
        "TableBarGaugeCellOptions": {
            "description": "Gauge cell options",
            "properties": {
                "mode": {
                    "description": "Enum expressing the possible display modes\nfor the bar gauge component of Grafana UI",
                    "enum": [
                        "basic",
                        "gradient",
                        "lcd"
                    ],
                    "title": "mode",
                    "type": "string"
                },
                "type": {
                    "const": "gauge",
                    "title": "type",
                    "type": "string"
                },
                "valueDisplayMode": {
                    "description": "Allows for the table cell gauge display type to set the gauge mode.",
                    "enum": [
                        "color",
                        "hidden",
                        "text"
                    ],
                    "title": "valueDisplayMode",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "mode",
                "type",
                "valueDisplayMode"
            ],
            "title": "TableBarGaugeCellOptions",
            "type": "object"
        },
        "TableCellOptions": {
            "anyOf": [
                {
                    "$ref": "#/definitions/TableAutoCellOptions"
                },
                {
                    "$ref": "#/definitions/TableColorTextCellOptions"
                },
                {
                    "$ref": "#/definitions/TableJsonViewCellOptions"
                },
                {
                    "$ref": "#/definitions/TableImageCellOptions"
                },
                {
                    "$ref": "#/definitions/TableDataLinksCellOptions"
                },
                {
                    "$ref": "#/definitions/TableActionsCellOptions"
                },
                {
                    "$ref": "#/definitions/TableBarGaugeCellOptions"
                },
                {
                    "$ref": "#/definitions/TableSparklineCellOptions"
                },
                {
                    "$ref": "#/definitions/TableColoredBackgroundCellOptions"
                }
            ],
            "description": "Table cell options. Each cell has a display mode\nand other potential options for that display.",
            "title": "TableCellOptions"
        },
        "TableColorTextCellOptions": {
            "description": "Colored text cell options",
            "properties": {
                "type": {
                    "const": "color-text",
                    "title": "type",
                    "type": "string"
                },
                "wrapText": {
                    "title": "wrapText",
                    "type": "boolean"
                }
            },
            "propertyOrder": [
                "type",
                "wrapText"
            ],
            "title": "TableColorTextCellOptions",
            "type": "object"
        },
        "TableColoredBackgroundCellOptions": {
            "description": "Colored background cell options",
            "properties": {
                "applyToRow": {
                    "title": "applyToRow",
                    "type": "boolean"
                },
                "mode": {
                    "description": "Display mode to the \"Colored Background\" display\nmode for table cells. Either displays a solid color (basic mode)\nor a gradient.",
                    "enum": [
                        "basic",
                        "gradient"
                    ],
                    "title": "mode",
                    "type": "string"
                },
                "type": {
                    "const": "color-background",
                    "title": "type",
                    "type": "string"
                },
                "wrapText": {
                    "title": "wrapText",
                    "type": "boolean"
                }
            },
            "propertyOrder": [
                "applyToRow",
                "mode",
                "type",
                "wrapText"
            ],
            "title": "TableColoredBackgroundCellOptions",
            "type": "object"
        },
        "TableDataLinksCellOptions": {
            "description": "Show data links in the cell",
            "properties": {
                "type": {
                    "const": "data-links",
                    "title": "type",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type"
            ],
            "title": "TableDataLinksCellOptions",
            "type": "object"
        },
        "TableFieldConfig": {
            "properties": {
                "align": {
                    "$ref": "#/definitions/FieldTextAlignment",
                    "title": "align"
                },
                "cellOptions": {
                    "$ref": "#/definitions/TableCellOptions",
                    "title": "cellOptions"
                },
                "displayMode": {
                    "description": "This field is deprecated in favor of using cellOptions",
                    "enum": [
                        "actions",
                        "auto",
                        "basic",
                        "color-background",
                        "color-background-solid",
                        "color-text",
                        "custom",
                        "data-links",
                        "gauge",
                        "gradient-gauge",
                        "image",
                        "json-view",
                        "lcd-gauge",
                        "sparkline"
                    ],
                    "title": "displayMode",
                    "type": "string"
                },
                "filterable": {
                    "title": "filterable",
                    "type": "boolean"
                },
                "hidden": {
                    "title": "hidden",
                    "type": "boolean"
                },
                "hideHeader": {
                    "description": "Hides any header for a column, useful for columns that show some static content or buttons.",
                    "title": "hideHeader",
                    "type": "boolean"
                },
                "inspect": {
                    "title": "inspect",
                    "type": "boolean"
                },
                "minWidth": {
                    "title": "minWidth",
                    "type": "number"
                },
                "width": {
                    "title": "width",
                    "type": "number"
                }
            },
            "propertyOrder": [
                "align",
                "cellOptions",
                "displayMode",
                "filterable",
                "hidden",
                "hideHeader",
                "inspect",
                "minWidth",
                "width"
            ],
            "title": "TableFieldConfig",
            "type": "object"
        },
        "TableFooterOptions": {
            "description": "Footer options",
            "properties": {
                "countRows": {
                    "title": "countRows",
                    "type": "boolean"
                },
                "enablePagination": {
                    "title": "enablePagination",
                    "type": "boolean"
                },
                "fields": {
                    "items": {
                        "type": "string"
                    },
                    "title": "fields",
                    "type": "array"
                },
                "reducer": {
                    "items": {
                        "type": "string"
                    },
                    "title": "reducer",
                    "type": "array"
                },
                "show": {
                    "title": "show",
                    "type": "boolean"
                }
            },
            "propertyOrder": [
                "countRows",
                "enablePagination",
                "fields",
                "reducer",
                "show"
            ],
            "title": "TableFooterOptions",
            "type": "object"
        },
        "TableImageCellOptions": {
            "description": "Json view cell options",
            "properties": {
                "alt": {
                    "title": "alt",
                    "type": "string"
                },
                "title": {
                    "title": "title",
                    "type": "string"
                },
                "type": {
                    "const": "image",
                    "title": "type",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "alt",
                "title",
                "type"
            ],
            "title": "TableImageCellOptions",
            "type": "object"
        },
        "TableJsonViewCellOptions": {
            "description": "Json view cell options",
            "properties": {
                "type": {
                    "const": "json-view",
                    "title": "type",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type"
            ],
            "title": "TableJsonViewCellOptions",
            "type": "object"
        },
        "TableOptions": {
            "properties": {
                "cellHeight": {
                    "description": "Controls the height of the rows",
                    "enum": [
                        "auto",
                        "lg",
                        "md",
                        "sm"
                    ],
                    "title": "cellHeight",
                    "type": "string"
                },
                "footer": {
                    "$ref": "#/definitions/TableFooterOptions",
                    "description": "Controls footer options",
                    "title": "footer"
                },
                "frameIndex": {
                    "description": "Represents the index of the selected frame",
                    "title": "frameIndex",
                    "type": "number"
                },
                "showHeader": {
                    "description": "Controls whether the panel should show the header",
                    "title": "showHeader",
                    "type": "boolean"
                },
                "showTypeIcons": {
                    "description": "Controls whether the header should show icons for the column types",
                    "title": "showTypeIcons",
                    "type": "boolean"
                },
                "sortBy": {
                    "description": "Used to control row sorting",
                    "items": {
                        "$ref": "#/definitions/TableSortByFieldState"
                    },
                    "title": "sortBy",
                    "type": "array"
                }
            },
            "propertyOrder": [
                "cellHeight",
                "footer",
                "frameIndex",
                "showHeader",
                "showTypeIcons",
                "sortBy"
            ],
            "title": "TableOptions",
            "type": "object"
        },
        "TableSortByFieldState": {
            "description": "Sort by field state",
            "properties": {
                "desc": {
                    "description": "Flag used to indicate descending sort order",
                    "title": "desc",
                    "type": "boolean"
                },
                "displayName": {
                    "description": "Sets the display name of the field to sort by",
                    "title": "displayName",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "desc",
                "displayName"
            ],
            "title": "TableSortByFieldState",
            "type": "object"
        },
        "TableSparklineCellOptions": {
            "description": "Sparkline cell options",
            "properties": {
                "axisBorderShow": {
                    "title": "axisBorderShow",
                    "type": "boolean"
                },
                "axisCenteredZero": {
                    "title": "axisCenteredZero",
                    "type": "boolean"
                },
                "axisColorMode": {
                    "description": "TODO docs",
                    "enum": [
                        "series",
                        "text"
                    ],
                    "title": "axisColorMode",
                    "type": "string"
                },
                "axisGridShow": {
                    "title": "axisGridShow",
                    "type": "boolean"
                },
                "axisLabel": {
                    "title": "axisLabel",
                    "type": "string"
                },
                "axisPlacement": {
                    "description": "TODO docs",
                    "enum": [
                        "auto",
                        "bottom",
                        "hidden",
                        "left",
                        "right",
                        "top"
                    ],
                    "title": "axisPlacement",
                    "type": "string"
                },
                "axisSoftMax": {
                    "title": "axisSoftMax",
                    "type": "number"
                },
                "axisSoftMin": {
                    "title": "axisSoftMin",
                    "type": "number"
                },
                "axisWidth": {
                    "title": "axisWidth",
                    "type": "number"
                },
                "barAlignment": {
                    "description": "TODO docs",
                    "enum": [
                        -1,
                        0,
                        1
                    ],
                    "title": "barAlignment",
                    "type": "number"
                },
                "barMaxWidth": {
                    "title": "barMaxWidth",
                    "type": "number"
                },
                "barWidthFactor": {
                    "title": "barWidthFactor",
                    "type": "number"
                },
                "drawStyle": {
                    "description": "TODO docs",
                    "enum": [
                        "bars",
                        "line",
                        "points"
                    ],
                    "title": "drawStyle",
                    "type": "string"
                },
                "fillBelowTo": {
                    "title": "fillBelowTo",
                    "type": "string"
                },
                "fillColor": {
                    "title": "fillColor",
                    "type": "string"
                },
                "fillOpacity": {
                    "title": "fillOpacity",
                    "type": "number"
                },
                "gradientMode": {
                    "description": "TODO docs",
                    "enum": [
                        "hue",
                        "none",
                        "opacity",
                        "scheme"
                    ],
                    "title": "gradientMode",
                    "type": "string"
                },
                "hideFrom": {
                    "$ref": "#/definitions/HideSeriesConfig",
                    "description": "TODO docs",
                    "title": "hideFrom"
                },
                "hideValue": {
                    "title": "hideValue",
                    "type": "boolean"
                },
                "insertNulls": {
                    "title": "insertNulls",
                    "type": [
                        "number",
                        "boolean"
                    ]
                },
                "lineColor": {
                    "title": "lineColor",
                    "type": "string"
                },
                "lineInterpolation": {
                    "description": "TODO docs",
                    "enum": [
                        "linear",
                        "smooth",
                        "stepAfter",
                        "stepBefore"
                    ],
                    "title": "lineInterpolation",
                    "type": "string"
                },
                "lineStyle": {
                    "$ref": "#/definitions/LineStyle",
                    "description": "TODO docs",
                    "title": "lineStyle"
                },
                "lineWidth": {
                    "title": "lineWidth",
                    "type": "number"
                },
                "pointColor": {
                    "title": "pointColor",
                    "type": "string"
                },
                "pointSize": {
                    "title": "pointSize",
                    "type": "number"
                },
                "pointSymbol": {
                    "title": "pointSymbol",
                    "type": "string"
                },
                "scaleDistribution": {
                    "$ref": "#/definitions/ScaleDistributionConfig",
                    "description": "TODO docs",
                    "title": "scaleDistribution"
                },
                "showPoints": {
                    "description": "TODO docs",
                    "enum": [
                        "always",
                        "auto",
                        "never"
                    ],
                    "title": "showPoints",
                    "type": "string"
                },
                "spanNulls": {
                    "description": "Indicate if null values should be treated as gaps or connected.\nWhen the value is a number, it represents the maximum delta in the\nX axis that should be considered connected.  For timeseries, this is milliseconds",
                    "title": "spanNulls",
                    "type": [
                        "number",
                        "boolean"
                    ]
                },
                "stacking": {
                    "$ref": "#/definitions/StackingConfig",
                    "description": "TODO docs",
                    "title": "stacking"
                },
                "thresholdsStyle": {
                    "$ref": "#/definitions/GraphThresholdsStyleConfig",
                    "description": "TODO docs",
                    "title": "thresholdsStyle"
                },
                "transform": {
                    "description": "TODO docs",
                    "enum": [
                        "constant",
                        "negative-Y"
                    ],
                    "title": "transform",
                    "type": "string"
                },
                "type": {
                    "const": "sparkline",
                    "title": "type",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "hideValue",
                "type",
                "drawStyle",
                "gradientMode",
                "insertNulls",
                "thresholdsStyle",
                "transform",
                "lineColor",
                "lineInterpolation",
                "lineStyle",
                "lineWidth",
                "spanNulls",
                "fillBelowTo",
                "fillColor",
                "fillOpacity",
                "pointColor",
                "pointSize",
                "pointSymbol",
                "showPoints",
                "axisBorderShow",
                "axisCenteredZero",
                "axisColorMode",
                "axisGridShow",
                "axisLabel",
                "axisPlacement",
                "axisSoftMax",
                "axisSoftMin",
                "axisWidth",
                "scaleDistribution",
                "barAlignment",
                "barMaxWidth",
                "barWidthFactor",
                "stacking",
                "hideFrom"
            ],
            "title": "TableSparklineCellOptions",
            "type": "object"
        },
        "Threshold": {
            "description": "User-defined value for a metric that triggers visual changes in a panel when this value is met or exceeded\nThey are used to conditionally style and color visualizations based on query results , and can be applied to most visualizations.",
            "properties": {
                "color": {
                    "description": "Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.",
                    "title": "color",
                    "type": "string"
                },
                "value": {
                    "description": "Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.\nNulls currently appear here when serializing -Infinity to JSON.",
                    "title": "value",
                    "type": [
                        "null",
                        "number"
                    ]
                }
            },
            "propertyOrder": [
                "color",
                "value"
            ],
            "title": "Threshold",
            "type": "object"
        },
        "ThresholdsConfig": {
            "description": "Thresholds configuration for the panel",
            "properties": {
                "mode": {
                    "$ref": "#/definitions/ThresholdsMode",
                    "description": "Thresholds mode.",
                    "title": "mode"
                },
                "steps": {
                    "description": "Must be sorted by 'value', first value is always -Infinity",
                    "items": {
                        "$ref": "#/definitions/Threshold"
                    },
                    "title": "steps",
                    "type": "array"
                }
            },
            "propertyOrder": [
                "mode",
                "steps"
            ],
            "title": "ThresholdsConfig",
            "type": "object"
        },
        "ThresholdsMode": {
            "description": "Thresholds can either be `absolute` (specific number) or `percentage` (relative to min or max, it will be values between 0 and 1).",
            "enum": [
                "absolute",
                "percentage"
            ],
            "title": "ThresholdsMode",
            "type": "string"
        },
        "TimeOption$1": {
            "description": "Counterpart for TypeScript's TimeOption type.",
            "properties": {
                "display": {
                    "title": "display",
                    "type": "string"
                },
                "from": {
                    "title": "from",
                    "type": "string"
                },
                "to": {
                    "title": "to",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "display",
                "from",
                "to"
            ],
            "title": "TimeOption$1",
            "type": "object"
        },
        "TimePickerConfig$1": {
            "description": "Time picker configuration\nIt defines the default config for the time picker and the refresh picker for the specific dashboard.",
            "properties": {
                "hidden": {
                    "description": "Whether timepicker is visible or not.",
                    "title": "hidden",
                    "type": "boolean"
                },
                "nowDelay": {
                    "description": "Override the now time by entering a time delay. Use this option to accommodate known delays in data aggregation to avoid null values.",
                    "title": "nowDelay",
                    "type": "string"
                },
                "quick_ranges": {
                    "description": "Quick ranges for time picker.",
                    "items": {
                        "$ref": "#/definitions/TimeOption$1"
                    },
                    "title": "quick_ranges",
                    "type": "array"
                },
                "refresh_intervals": {
                    "description": "Interval options available in the refresh picker dropdown.",
                    "items": {
                        "type": "string"
                    },
                    "title": "refresh_intervals",
                    "type": "array"
                }
            },
            "propertyOrder": [
                "hidden",
                "nowDelay",
                "quick_ranges",
                "refresh_intervals"
            ],
            "title": "TimePickerConfig$1",
            "type": "object"
        },
        "TimeSeries": {
            "properties": {
                "cacheTimeout": {
                    "description": "Sets panel queries cache timeout.",
                    "title": "cacheTimeout",
                    "type": "string"
                },
                "datasource": {
                    "$ref": "#/definitions/DataSourceRef_1",
                    "description": "The datasource used in all targets.",
                    "title": "datasource"
                },
                "description": {
                    "description": "Panel description.",
                    "title": "description",
                    "type": "string"
                },
                "fieldConfig": {
                    "$ref": "#/definitions/FieldConfigSource<TimeSeriesFieldConfig>",
                    "title": "fieldConfig"
                },
                "gridPos": {
                    "$ref": "#/definitions/GridPos",
                    "description": "Grid position.",
                    "title": "gridPos"
                },
                "hideTimeOverride": {
                    "description": "Controls if the timeFrom or timeShift overrides are shown in the panel header",
                    "title": "hideTimeOverride",
                    "type": "boolean"
                },
                "id": {
                    "description": "Unique identifier of the panel. Generated by Grafana when creating a new panel. It must be unique within a dashboard, but not globally.",
                    "title": "id",
                    "type": "number"
                },
                "interval": {
                    "description": "The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables.\nThis value must be formatted as a number followed by a valid time\nidentifier like: \"40s\", \"3d\", etc.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options",
                    "title": "interval",
                    "type": "string"
                },
                "libraryPanel": {
                    "$ref": "#/definitions/LibraryPanelRef",
                    "description": "Dynamically load the panel",
                    "title": "libraryPanel"
                },
                "links": {
                    "description": "Panel links.",
                    "items": {
                        "$ref": "#/definitions/DashboardLink"
                    },
                    "title": "links",
                    "type": "array"
                },
                "maxDataPoints": {
                    "description": "The maximum number of data points that the panel queries are retrieving.",
                    "title": "maxDataPoints",
                    "type": "number"
                },
                "maxPerRow": {
                    "description": "Option for repeated panels that controls max items per row\nOnly relevant for horizontally repeated panels",
                    "title": "maxPerRow",
                    "type": "number"
                },
                "options": {
                    "$ref": "#/definitions/TimeSeriesOptions",
                    "title": "options"
                },
                "pluginVersion": {
                    "description": "The version of the plugin that is used for this panel. This is used to find the plugin to display the panel and to migrate old panel configs.",
                    "title": "pluginVersion",
                    "type": "string"
                },
                "queryCachingTTL": {
                    "description": "Overrides the data source configured time-to-live for a query cache item in milliseconds",
                    "title": "queryCachingTTL",
                    "type": "number"
                },
                "repeat": {
                    "description": "Name of template variable to repeat for.",
                    "title": "repeat",
                    "type": "string"
                },
                "repeatDirection": {
                    "description": "Direction to repeat in if 'repeat' is set.\n`h` for horizontal, `v` for vertical.",
                    "enum": [
                        "h",
                        "v"
                    ],
                    "title": "repeatDirection",
                    "type": "string"
                },
                "targets": {
                    "items": {
                        "$ref": "#/definitions/PrometheusDataQuery"
                    },
                    "title": "targets",
                    "type": "array"
                },
                "timeFrom": {
                    "description": "Overrides the relative time range for individual panels,\nwhich causes them to be different than what is selected in\nthe dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different\ntime periods or days on the same dashboard.\nThe value is formatted as time operation like: `now-5m` (Last 5 minutes), `now/d` (the day so far),\n`now-5d/d`(Last 5 days), `now/w` (This week so far), `now-2y/y` (Last 2 years).\nNote: Panel time overrides have no effect when the dashboard’s time range is absolute.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options",
                    "title": "timeFrom",
                    "type": "string"
                },
                "timeShift": {
                    "description": "Overrides the time range for individual panels by shifting its start and end relative to the time picker.\nFor example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting `2h`.\nNote: Panel time overrides have no effect when the dashboard’s time range is absolute.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options",
                    "title": "timeShift",
                    "type": "string"
                },
                "title": {
                    "description": "Panel title.",
                    "title": "title",
                    "type": "string"
                },
                "transformations": {
                    "description": "List of transformations that are applied to the panel data before rendering.\nWhen there are multiple transformations, Grafana applies them in the order they are listed.\nEach transformation creates a result set that then passes on to the next transformation in the processing pipeline.",
                    "items": {
                        "$ref": "#/definitions/DataTransformerConfig$1"
                    },
                    "title": "transformations",
                    "type": "array"
                },
                "transparent": {
                    "description": "Whether to display the panel without a background.",
                    "title": "transparent",
                    "type": "boolean"
                },
                "type": {
                    "const": "timeseries",
                    "description": "The panel plugin type id. This is used to find the plugin to display the panel.",
                    "title": "type",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "options",
                "targets",
                "fieldConfig",
                "cacheTimeout",
                "datasource",
                "description",
                "gridPos",
                "hideTimeOverride",
                "id",
                "interval",
                "libraryPanel",
                "links",
                "maxDataPoints",
                "maxPerRow",
                "pluginVersion",
                "queryCachingTTL",
                "repeat",
                "repeatDirection",
                "timeFrom",
                "timeShift",
                "title",
                "transformations",
                "transparent"
            ],
            "title": "TimeSeries",
            "type": "object"
        },
        "TimeSeriesFieldConfig": {
            "properties": {
                "axisBorderShow": {
                    "title": "axisBorderShow",
                    "type": "boolean"
                },
                "axisCenteredZero": {
                    "title": "axisCenteredZero",
                    "type": "boolean"
                },
                "axisColorMode": {
                    "description": "TODO docs",
                    "enum": [
                        "series",
                        "text"
                    ],
                    "title": "axisColorMode",
                    "type": "string"
                },
                "axisGridShow": {
                    "title": "axisGridShow",
                    "type": "boolean"
                },
                "axisLabel": {
                    "title": "axisLabel",
                    "type": "string"
                },
                "axisPlacement": {
                    "description": "TODO docs",
                    "enum": [
                        "auto",
                        "bottom",
                        "hidden",
                        "left",
                        "right",
                        "top"
                    ],
                    "title": "axisPlacement",
                    "type": "string"
                },
                "axisSoftMax": {
                    "title": "axisSoftMax",
                    "type": "number"
                },
                "axisSoftMin": {
                    "title": "axisSoftMin",
                    "type": "number"
                },
                "axisWidth": {
                    "title": "axisWidth",
                    "type": "number"
                },
                "barAlignment": {
                    "description": "TODO docs",
                    "enum": [
                        -1,
                        0,
                        1
                    ],
                    "title": "barAlignment",
                    "type": "number"
                },
                "barMaxWidth": {
                    "title": "barMaxWidth",
                    "type": "number"
                },
                "barWidthFactor": {
                    "title": "barWidthFactor",
                    "type": "number"
                },
                "drawStyle": {
                    "description": "TODO docs",
                    "enum": [
                        "bars",
                        "line",
                        "points"
                    ],
                    "title": "drawStyle",
                    "type": "string"
                },
                "fillBelowTo": {
                    "title": "fillBelowTo",
                    "type": "string"
                },
                "fillColor": {
                    "title": "fillColor",
                    "type": "string"
                },
                "fillOpacity": {
                    "title": "fillOpacity",
                    "type": "number"
                },
                "gradientMode": {
                    "description": "TODO docs",
                    "enum": [
                        "hue",
                        "none",
                        "opacity",
                        "scheme"
                    ],
                    "title": "gradientMode",
                    "type": "string"
                },
                "hideFrom": {
                    "$ref": "#/definitions/HideSeriesConfig",
                    "description": "TODO docs",
                    "title": "hideFrom"
                },
                "insertNulls": {
                    "title": "insertNulls",
                    "type": [
                        "number",
                        "boolean"
                    ]
                },
                "lineColor": {
                    "title": "lineColor",
                    "type": "string"
                },
                "lineInterpolation": {
                    "description": "TODO docs",
                    "enum": [
                        "linear",
                        "smooth",
                        "stepAfter",
                        "stepBefore"
                    ],
                    "title": "lineInterpolation",
                    "type": "string"
                },
                "lineStyle": {
                    "$ref": "#/definitions/LineStyle",
                    "description": "TODO docs",
                    "title": "lineStyle"
                },
                "lineWidth": {
                    "title": "lineWidth",
                    "type": "number"
                },
                "pointColor": {
                    "title": "pointColor",
                    "type": "string"
                },
                "pointSize": {
                    "title": "pointSize",
                    "type": "number"
                },
                "pointSymbol": {
                    "title": "pointSymbol",
                    "type": "string"
                },
                "scaleDistribution": {
                    "$ref": "#/definitions/ScaleDistributionConfig",
                    "description": "TODO docs",
                    "title": "scaleDistribution"
                },
                "showPoints": {
                    "description": "TODO docs",
                    "enum": [
                        "always",
                        "auto",
                        "never"
                    ],
                    "title": "showPoints",
                    "type": "string"
                },
                "spanNulls": {
                    "description": "Indicate if null values should be treated as gaps or connected.\nWhen the value is a number, it represents the maximum delta in the\nX axis that should be considered connected.  For timeseries, this is milliseconds",
                    "title": "spanNulls",
                    "type": [
                        "number",
                        "boolean"
                    ]
                },
                "stacking": {
                    "$ref": "#/definitions/StackingConfig",
                    "description": "TODO docs",
                    "title": "stacking"
                },
                "thresholdsStyle": {
                    "$ref": "#/definitions/GraphThresholdsStyleConfig",
                    "description": "TODO docs",
                    "title": "thresholdsStyle"
                },
                "transform": {
                    "description": "TODO docs",
                    "enum": [
                        "constant",
                        "negative-Y"
                    ],
                    "title": "transform",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "drawStyle",
                "gradientMode",
                "insertNulls",
                "thresholdsStyle",
                "transform",
                "lineColor",
                "lineInterpolation",
                "lineStyle",
                "lineWidth",
                "spanNulls",
                "fillBelowTo",
                "fillColor",
                "fillOpacity",
                "pointColor",
                "pointSize",
                "pointSymbol",
                "showPoints",
                "axisBorderShow",
                "axisCenteredZero",
                "axisColorMode",
                "axisGridShow",
                "axisLabel",
                "axisPlacement",
                "axisSoftMax",
                "axisSoftMin",
                "axisWidth",
                "scaleDistribution",
                "barAlignment",
                "barMaxWidth",
                "barWidthFactor",
                "stacking",
                "hideFrom"
            ],
            "title": "TimeSeriesFieldConfig",
            "type": "object"
        },
        "TimeSeriesOptions": {
            "properties": {
                "legend": {
                    "$ref": "#/definitions/VizLegendOptions",
                    "title": "legend"
                },
                "orientation": {
                    "description": "TODO docs",
                    "enum": [
                        "auto",
                        "horizontal",
                        "vertical"
                    ],
                    "title": "orientation",
                    "type": "string"
                },
                "timezone": {
                    "items": {
                        "type": "string"
                    },
                    "title": "timezone",
                    "type": "array"
                },
                "tooltip": {
                    "$ref": "#/definitions/VizTooltipOptions",
                    "title": "tooltip"
                }
            },
            "propertyOrder": [
                "legend",
                "orientation",
                "tooltip",
                "timezone"
            ],
            "title": "TimeSeriesOptions",
            "type": "object"
        },
        "TooltipDisplayMode": {
            "description": "TODO docs",
            "enum": [
                "multi",
                "none",
                "single"
            ],
            "title": "TooltipDisplayMode",
            "type": "string"
        },
        "ValueMap": {
            "description": "Maps text values to a color or different display text and color.\nFor example, you can configure a value mapping so that all instances of the value 10 appear as Perfection! rather than the number.",
            "properties": {
                "options": {
                    "$ref": "#/definitions/Record<string,ValueMappingResult>",
                    "description": "Map with <value_to_match>: ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }",
                    "title": "options"
                },
                "type": {
                    "const": "value",
                    "title": "type",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "options",
                "type"
            ],
            "title": "ValueMap",
            "type": "object"
        },
        "ValueMapping": {
            "anyOf": [
                {
                    "$ref": "#/definitions/ValueMap"
                },
                {
                    "$ref": "#/definitions/RangeMap"
                },
                {
                    "$ref": "#/definitions/RegexMap"
                },
                {
                    "$ref": "#/definitions/SpecialValueMap"
                }
            ],
            "description": "Allow to transform the visual representation of specific data values in a visualization, irrespective of their original units",
            "title": "ValueMapping"
        },
        "ValueMappingResult": {
            "description": "Result used as replacement with text and color when the value matches",
            "properties": {
                "color": {
                    "description": "Text to use when the value matches",
                    "title": "color",
                    "type": "string"
                },
                "icon": {
                    "description": "Icon to display when the value matches. Only specific visualizations.",
                    "title": "icon",
                    "type": "string"
                },
                "index": {
                    "description": "Position in the mapping array. Only used internally.",
                    "title": "index",
                    "type": "number"
                },
                "text": {
                    "description": "Text to display when the value matches",
                    "title": "text",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "color",
                "icon",
                "index",
                "text"
            ],
            "title": "ValueMappingResult",
            "type": "object"
        },
        "VariableModel": {
            "properties": {
                "allValue": {
                    "description": "Custom all value",
                    "title": "allValue",
                    "type": "string"
                },
                "allowCustomValue": {
                    "description": "Allow custom values to be entered in the variable",
                    "title": "allowCustomValue",
                    "type": "boolean"
                },
                "current": {
                    "$ref": "#/definitions/VariableOption",
                    "description": "Shows current selected variable text/value on the dashboard",
                    "title": "current"
                },
                "datasource": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DataSourceRef"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "title": "datasource"
                },
                "description": {
                    "description": "Description of variable. It can be defined but `null`.",
                    "title": "description",
                    "type": "string"
                },
                "hide": {
                    "description": "Visibility configuration for the variable",
                    "enum": [
                        0,
                        1,
                        2
                    ],
                    "title": "hide",
                    "type": "number"
                },
                "includeAll": {
                    "description": "Whether all value option is available or not",
                    "title": "includeAll",
                    "type": "boolean"
                },
                "label": {
                    "description": "Optional display name",
                    "title": "label",
                    "type": "string"
                },
                "multi": {
                    "description": "Whether multiple values can be selected or not from variable value list",
                    "title": "multi",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of variable",
                    "title": "name",
                    "type": "string"
                },
                "options": {
                    "description": "Options that can be selected for a variable.",
                    "items": {
                        "$ref": "#/definitions/VariableOption"
                    },
                    "title": "options",
                    "type": "array"
                },
                "query": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Record<string,unknown>"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Query used to fetch values for a variable",
                    "title": "query"
                },
                "refresh": {
                    "description": "Options to config when to refresh a variable",
                    "enum": [
                        0,
                        1,
                        2
                    ],
                    "title": "refresh",
                    "type": "number"
                },
                "regex": {
                    "description": "Optional field, if you want to extract part of a series name or metric node segment.\nNamed capture groups can be used to separate the display text and value.",
                    "title": "regex",
                    "type": "string"
                },
                "skipUrlSync": {
                    "description": "Whether the variable value should be managed by URL query params or not",
                    "title": "skipUrlSync",
                    "type": "boolean"
                },
                "sort": {
                    "description": "Options sort order",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8
                    ],
                    "title": "sort",
                    "type": "number"
                },
                "type": {
                    "$ref": "#/definitions/VariableType",
                    "description": "Type of variable",
                    "title": "type"
                }
            },
            "propertyOrder": [
                "datasource",
                "options",
                "description",
                "type",
                "refresh",
                "name",
                "label",
                "hide",
                "query",
                "allValue",
                "allowCustomValue",
                "current",
                "includeAll",
                "multi",
                "regex",
                "skipUrlSync",
                "sort"
            ],
            "title": "VariableModel",
            "type": "object"
        },
        "VariableOption": {
            "description": "Option to be selected in a variable.",
            "properties": {
                "selected": {
                    "description": "Whether the option is selected or not",
                    "title": "selected",
                    "type": "boolean"
                },
                "text": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Text to be displayed for the option",
                    "title": "text"
                },
                "value": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Value of the option",
                    "title": "value"
                }
            },
            "propertyOrder": [
                "selected",
                "text",
                "value"
            ],
            "title": "VariableOption",
            "type": "object"
        },
        "VariableType": {
            "description": "Dashboard variable type\n`query`: Query-generated list of values such as metric names, server names, sensor IDs, data centers, and so on.\n`adhoc`: Key/value filters that are automatically added to all metric queries for a data source (Prometheus, Loki, InfluxDB, and Elasticsearch only).\n`constant`: \tDefine a hidden constant.\n`datasource`: Quickly change the data source for an entire dashboard.\n`interval`: Interval variables represent time spans.\n`textbox`: Display a free text input field with an optional default value.\n`custom`: Define the variable options manually using a comma-separated list.\n`system`: Variables defined by Grafana. See: https://grafana.com/docs/grafana/latest/dashboards/variables/add-template-variables/#global-variables",
            "enum": [
                "adhoc",
                "constant",
                "custom",
                "datasource",
                "groupby",
                "interval",
                "query",
                "snapshot",
                "system",
                "textbox"
            ],
            "title": "VariableType",
            "type": "string"
        },
        "VisibilityMode": {
            "description": "TODO docs",
            "enum": [
                "always",
                "auto",
                "never"
            ],
            "title": "VisibilityMode",
            "type": "string"
        },
        "VizLegendOptions": {
            "description": "TODO docs",
            "properties": {
                "asTable": {
                    "title": "asTable",
                    "type": "boolean"
                },
                "calcs": {
                    "items": {
                        "type": "string"
                    },
                    "title": "calcs",
                    "type": "array"
                },
                "displayMode": {
                    "$ref": "#/definitions/LegendDisplayMode",
                    "title": "displayMode"
                },
                "isVisible": {
                    "title": "isVisible",
                    "type": "boolean"
                },
                "placement": {
                    "$ref": "#/definitions/LegendPlacement",
                    "title": "placement"
                },
                "showLegend": {
                    "title": "showLegend",
                    "type": "boolean"
                },
                "sortBy": {
                    "title": "sortBy",
                    "type": "string"
                },
                "sortDesc": {
                    "title": "sortDesc",
                    "type": "boolean"
                },
                "width": {
                    "title": "width",
                    "type": "number"
                }
            },
            "propertyOrder": [
                "asTable",
                "calcs",
                "displayMode",
                "isVisible",
                "placement",
                "showLegend",
                "sortBy",
                "sortDesc",
                "width"
            ],
            "title": "VizLegendOptions",
            "type": "object"
        },
        "VizOrientation": {
            "description": "TODO docs",
            "enum": [
                "auto",
                "horizontal",
                "vertical"
            ],
            "title": "VizOrientation",
            "type": "string"
        },
        "VizTextDisplayOptions": {
            "description": "TODO docs",
            "properties": {
                "percentSize": {
                    "description": "Explicit percent text size",
                    "title": "percentSize",
                    "type": "number"
                },
                "titleSize": {
                    "description": "Explicit title text size",
                    "title": "titleSize",
                    "type": "number"
                },
                "valueSize": {
                    "description": "Explicit value text size",
                    "title": "valueSize",
                    "type": "number"
                }
            },
            "propertyOrder": [
                "percentSize",
                "titleSize",
                "valueSize"
            ],
            "title": "VizTextDisplayOptions",
            "type": "object"
        },
        "VizTooltipOptions": {
            "description": "TODO docs",
            "properties": {
                "hideZeros": {
                    "title": "hideZeros",
                    "type": "boolean"
                },
                "maxHeight": {
                    "title": "maxHeight",
                    "type": "number"
                },
                "maxWidth": {
                    "title": "maxWidth",
                    "type": "number"
                },
                "mode": {
                    "$ref": "#/definitions/TooltipDisplayMode",
                    "title": "mode"
                },
                "sort": {
                    "$ref": "#/definitions/SortOrder",
                    "title": "sort"
                }
            },
            "propertyOrder": [
                "hideZeros",
                "maxHeight",
                "maxWidth",
                "mode",
                "sort"
            ],
            "title": "VizTooltipOptions",
            "type": "object"
        }
    }
}

